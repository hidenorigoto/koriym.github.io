<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: PHP | BEAR Blog]]></title>
  <link href="http://koriym.github.io/blog/categories/php/atom.xml" rel="self"/>
  <link href="http://koriym.github.io/"/>
  <updated>2013-10-31T22:15:53+09:00</updated>
  <id>http://koriym.github.io/</id>
  <author>
    <name><![CDATA[Akihito Koriyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BEAR.Sunday Quick Tour]]></title>
    <link href="http://koriym.github.io/bear-sunday-quick-tour"/>
    <updated>2013-03-04T00:00:00+09:00</updated>
    <id>http://koriym.github.io/bear-sunday-quick-tour</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/bear-sunday-quick-tour">Tweet</a>
</div>


<p>簡単にBEAR.Sundayを体験できるチュートリアルを用意しました。それぞれのセクションの目安の時間も記してみました。良かったら手を動かしてお付き合いください。</p>

<h2>準備</h2>

<p>PHP 5.4がインストールされていればOKです。<br/>
<code>
$ php -v
PHP 5.4.11 (cli) (built: Jan 27 2013 22:00:35)
Copyright (c) 1997-2013 The PHP Group
</code></p>

<p>もしPHP5.4がインストールされてなくてもOSXならこれだけでインストールできます。<sup><a href="#footnote_0_1693" id="identifier_0_1693" class="footnote-link footnote-identifier-link" title="詳しくは php-osx.liip.ch を">1</a></sup><br/>
<code>
curl -s http://php-osx.liip.ch/install.sh | bash -s 5.4
</code></p>

<h2>BEAR.Sundayのインストール</h2>

<p><i class="icon-time"></i> 5-? min</p>

<p>コンソールでインストールします。</p>

<p><code>
curl -s http://install.bear-project.net/ | sh -s ./bear
</code></p>

<p>または（curlが無い場合など）<br/>
<code>
$ php -r "eval('?&gt;'.file_get_contents('https://getcomposer.org/installer'));"
$ php composer.phar create-project -s dev --dev bear/package ./bear
</code></p>

<h2>アプリケーションの作成</h2>

<p><i class="icon-time"></i> 1 min</p>

<p>Helloアプリケーションを作成します。<br/>
<code>
$ cd bear
$ php bin/new_app.php Hello
</code></p>

<h2>コンソールでのアプリケーション実行</h2>

<p><i class="icon-time"></i> 3 min</p>

<p>web.phpを使いconsoleでHTMLの出力が確認できます。GETメソッドで/（ルート）をアクセスするには以下のようにタイプします。</p>

<p><code>
$ cd apps/Hello/public
$ php web.php get /
</code></p>

<p>三番目の引き数でアプリケーションの実行コンテキスト（モード）を切り替える事ができます。</p>

<p>プロダクション<br/>
<code>
php web.php get / prod
</code><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">200</span> <span class="nx">OK</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">no</span><span class="o">-</span><span class="nx">cache</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Mon</span><span class="p">,</span> <span class="mo">04</span> <span class="nx">Mar</span> <span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">29</span><span class="o">:</span><span class="mi">49</span> <span class="nx">GMT</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="o">&amp;</span><span class="nx">lt</span><span class="p">;</span> <span class="o">!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;ja&quot;</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;</span><span class="nx">body</span><span class="o">&gt;&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">BEAR</span><span class="o">.</span><span class="nx">Sunday</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>API<br/>
<code>
php web.php get / api
</code></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">200</span> <span class="nx">OK</span>
</span><span class='line'><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">application\</span><span class="o">/</span><span class="nx">hal</span><span class="o">+</span><span class="nx">json</span><span class="p">;</span> <span class="nx">charset</span><span class="o">=</span><span class="nx">UTF</span><span class="o">-</span><span class="mi">8</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">no</span><span class="o">-</span><span class="nx">cache</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Mon</span><span class="p">,</span> <span class="mo">04</span> <span class="nx">Mar</span> <span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">31</span><span class="o">:</span><span class="mi">17</span> <span class="nx">GMT</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="s2">&quot;greeting&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello BEAR.Sunday&quot;</span><span class="p">,</span>
</span><span class='line'><span class="s2">&quot;_links&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;href&quot;</span><span class="o">:</span> <span class="s2">&quot;page://self/index&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>利用できないメソッドには405(Method Not Allowed)が返って来ます。<br/>
<code>
php web.php delete /
</code><br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">405</span> <span class="nx">Method</span> <span class="k">Not</span> <span class="nx">Allowed</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">class</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">BEAR\Resource\Exception\MethodNotAllowed</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">message</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Hello\Resource\Page\Index</span><span class="o">::</span><span class="na">onDelete</span><span class="p">()</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">code</span><span class="o">-</span><span class="nb">file</span><span class="o">-</span><span class="nx">line</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;(</span><span class="mi">405</span><span class="p">)</span> <span class="nx">\</span><span class="o">/</span><span class="nx">Users\</span><span class="o">/</span><span class="nx">akihito\</span><span class="o">/</span><span class="nx">work\</span><span class="o">/</span><span class="nx">bear\</span><span class="o">/</span><span class="nx">vendor\</span><span class="o">/</span><span class="nx">bear\</span><span class="o">/</span><span class="nx">resource\</span><span class="o">/</span><span class="nx">src\</span><span class="o">/</span><span class="nx">BEAR\</span><span class="o">/</span><span class="nx">Resource\</span><span class="o">/</span><span class="nx">DevInvoker</span><span class="o">.</span><span class="nx">php</span><span class="o">:</span><span class="mi">59</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">previous</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">ndash</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">id</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">e500</span><span class="o">-</span><span class="nx">b14ad</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">id</span><span class="o">-</span><span class="nb">file</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">\</span><span class="o">/</span><span class="nx">Users\</span><span class="o">/</span><span class="nx">akihito\</span><span class="o">/</span><span class="nx">work\</span><span class="o">/</span><span class="nx">bear\</span><span class="o">/</span><span class="nx">apps\</span><span class="o">/</span><span class="nx">Hello\</span><span class="o">/</span><span class="nx">data\</span><span class="o">/</span><span class="nx">log\</span><span class="o">/</span><span class="nx">e500</span><span class="o">-</span><span class="nx">b14ad</span><span class="o">.</span><span class="nx">log</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">no</span><span class="o">-</span><span class="nx">cache</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="o">&amp;</span><span class="nx">ldquo</span><span class="p">;</span><span class="nx">Mon</span><span class="p">,</span> <span class="mo">04</span> <span class="nx">Mar</span> <span class="mi">2013</span> <span class="mi">12</span><span class="o">:</span><span class="mi">47</span><span class="o">:</span><span class="mi">11</span> <span class="nx">GMT</span><span class="o">&amp;</span><span class="nx">rdquo</span><span class="p">;]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">requested</span> <span class="nx">method</span> <span class="nx">is</span> <span class="k">not</span> <span class="nx">allowed</span> <span class="k">for</span> <span class="k">this</span> <span class="nx">URI</span><span class="o">.</span>
</span><span class='line'><span class="nx">KumaAir</span><span class="o">:</span><span class="k">public</span> <span class="nx">akihito</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
404も試してみましょう。</p>

<h2>Webでのアプリケーション実行 (5 min)</h2>

<p>同じweb.phpを使ってBuilt-in Web serverを立ち上げます。ポート番号は自由です。<br/>
<code>
php -S localhost:8088 web.php
</code></p>

<p>挨拶が表示されました。devモードではツールバーと共に表示されます。<br/>
<a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/1582b4c4f63329511aff544dd1ebef7e.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/1582b4c4f63329511aff544dd1ebef7e.png" alt="スクリーンショット 2013-03-04 21.53.49" class="alignleft size-full wp-image-1705" /></a><br clear="all" /></p>

<p>この挨拶には<b class="button">page://self/index</b>という名前(URI)がついています。このURIのついた情報は「リソース」と呼ばれます。</p>

<p>灰色のバックグランドで表示されてるのはこのリソースはキャッシュを利用しないことを表します<sup><a href="#footnote_1_1693" id="identifier_1_1693" class="footnote-link footnote-identifier-link" title="緑/赤=Read/Write">2</a></sup> URIの隣にツールバーが並び、情報の確認やコードの編集ができるようになっています。破線はそのリソースの表示範囲を表します。</p>

<h2>オンライン編集</h2>

<p>リソースのコードとビューテンプレートはwebブラウザ上で編集することができます。<br/>
<a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/fcb9351e421ea4a9831bb99e3340bc67.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/fcb9351e421ea4a9831bb99e3340bc67.png" alt="スクリーンショット 2013-03-04 22.13.22" class="alignleft size-full wp-image-1714" /></a><br clear="all" /><br/>
保存にはショートカットキーも使えます。(⌘W / Ctl+W)</p>

<h2>シンタックスエラー</h2>

<p><i class="icon-time"></i> 2 min</p>

<p>ClassのCを誤って消してしまいました。シンタックスエラーになりますがエラーある状態でアプリケーションを実行するとエラーメッセージの表示されたエディターが表示されます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/9f9ffde325710fd6e898bf8086c17f37.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/9f9ffde325710fd6e898bf8086c17f37.png" alt="スクリーンショット 2013-03-04 22.27.37" class="alignleft size-full wp-image-1716" /></a><br clear="all" /><br/>
その場で修正して、「保存」「再読み込み」ですぐに復帰します。ケアレスミスによる思考の中断を最小限にします。</p>

<h2>クエリーを読む</h2>

<p><i class="icon-time"></i> 5 min</p>

<p>HTTPのGETメソッドではonGetメソッドがアクセスされます。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">onGet</span><span class="p">(</span><span class="nv">$name</span> <span class="o">=</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">BEAR</span><span class="o">.</span><span class="nx">Sunday</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>このメソッドは</p>

<pre>$_GET</pre>


<p>と同様に機能します。$_GET[&lsquo;name&rsquo;]を$nameとして受け取っています。</p>

<pre>?name=YourName</pre>


<p>としてアクセスしてみたり、以下のようにyearクエリーも受け取ってみましょう</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="k">public</span> <span class="k">function</span> <span class="nf">onGet</span><span class="p">(</span><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;BEAR.Sunday&#39;</span><span class="p">,</span> <span class="nv">$year</span><span class="o">=</span><span class="mi">2013</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="p">[</span><span class="s1">&#39;greeting&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s2">&quot;, It&#39;s </span><span class="si">{</span><span class="nv">$year</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/271d16f1b59a267b7e7b571c9ee77c84.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/271d16f1b59a267b7e7b571c9ee77c84.png" alt="スクリーンショット 2013-03-04 22.43.18" class="alignleft size-full wp-image-1718" /></a><br clear="all" /></p>

<p><em>メソッドは<strong>$_GET</strong>クエリーと同じく名前で指定されるので（名前付き引き数＝named parameter)通常のPHPの引き数のように引き数の順番では変数名で指定されます。（順番は関係ありません）$_GETのクエリーは取得するのではなく、PHPのメソッドと融合して与えられている事にも注目してください。</em></p>

<h2>テンプレート</h2>

<p><i class="icon-time"></i> 1 min</p>

<p>リソースクラスファイルの拡張子をtplあるいはtwigに変えたものがそのリソースの表現に用いられるビューテンプレートになります。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/7aa52204264f594c4f4a7fdfb5fa4cca.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/7aa52204264f594c4f4a7fdfb5fa4cca.png" alt="スクリーンショット 2013-03-04 22.55.42" class="alignleft size-full wp-image-1723" /></a><br clear="all" /></p>

<h2>/dev/ツール</h2>

<p><i class="icon-time"></i> 3 min</p>

<p>URLに/dev/と入力するとデバックツールが表示されます</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/55d203fe83ff32fa33156f66650ac8e1.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/55d203fe83ff32fa33156f66650ac8e1.png" alt="スクリーンショット 2013-03-04 22.58.27" class="alignleft size-full wp-image-1724" /></a></p>

<h3>リソース一覧</h3>

<p>/dev/resource/ ではリソースを一覧したり新規のリソースをつくることができます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/e4249349b0ca4c6ad94182c21b6b6c69.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/e4249349b0ca4c6ad94182c21b6b6c69.png" alt="スクリーンショット 2013-03-04 22.59.31" class="alignleft size-full wp-image-1725" /></a><br clear="all" /></p>

<p>つくったばかりのHelloアプリケーションは<strong>page://self/index</strong>というページリソースが１つ。利用可能なメソッドはGETだけという事が分かります。リソース（モデル）は、アプリケーションの核心です。アプリケーション管理者はそのアプリケーションにいくつ、どんなリソースがあるかをこのリソース画面で知る事ができます。</p>

<h2>What&#8217;s next ?</h2>

<p><i class="icon-time"></i> 1 week</p>

<p><a href="http://www.bear-project.net/blog/WEB-DB-PRESS-Vol73">Web+DB Press記事</a>のリソースを作ってみるのはどうでしょうか。<a href="https://code.google.com/p/bearsunday/wiki/my_first_index">&#8220;はじめて&#8221;シリーズ</a>はソフトウエアやインターネット技術の概念を同時に学ぶ事ができます。<a href="https://code.google.com/p/bearsunday/wiki/blog">ブログチュートリアル</a>は既存のFWとの実装の比較になります。<a href="https://github.com/koriym/BEAR.Package/tree/develop/apps/Sandbox">apps/Sandboxアプリケーション</a>はDB/ページングなど実用的なサンプルも含みます。特にRESTに興味のある方は定番となってる<a href="http://www.infoq.com/articles/webber-rest-workflow">REST Bucks</a>をBEAR.Sundayで実装した<a href="https://github.com/koriym/BEAR.Package/blob/develop/apps/Sandbox/Resource/Page/Restbucks/Index.php">HATEOAS実装</a>もあります。</p>

<ol class="footnotes">
  <li id="footnote_0_1693" class="footnote">
    詳しくは php-osx.liip.ch を [<a href="#identifier_0_1693" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1693" class="footnote">
    緑/赤=Read/Write [<a href="#identifier_1_1693" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS Vol.73]]></title>
    <link href="http://koriym.github.io/WEB-DB-PRESS-Vol73"/>
    <updated>2013-02-24T00:00:00+09:00</updated>
    <id>http://koriym.github.io/on-webdb-press-vol-73</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/WEB-DB-PRESS-Vol73">Tweet</a>
</div>


<h2>BEAR.SundayでRESTfulなシステム開発</h2>

<p>WEB+DB PRESSの大人気連載「巨人の肩からPHP 先人たちに学ぶモダンプログラミング」の連載５回目にBEAR.Sundayをとりあげて頂きました。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/734505566.jpg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/734505566.jpg" alt="734505566" class="aligncenter size-full wp-image-1676" /></a>
RESTやRESTとBEAR.Sundayの関わりに触れてから、実際のリソースやリソース実装がどのようなコードになるかを紹介してもらっています。限られたページの中でよくまとまっていると思います。執筆編集の方々、ありがとうございます。</p>

<p>サンプルを雑誌に掲載されているようにSandboxアプリケーションでお試ししてもらっても全然問題ないのですが、雑誌掲載後にアプリケーションのスケルトンコードをcomposer create-projectで作成する機能がつきました。apps/ディレクトリで以下のようにアプリケーションディレクトリ名を指定してインストールします。</p>

<p><code>php composer.phar create-project -s dev --dev bear/skeleton ./MyApp</code></p>

<p>MyAppはアプリケーション名です。インストール直後にcomposerのpost-install-scriptが実行され「フォルダ名として指定したアプリケーション名」がコード中のnamespaceなどにも適用されます。アプリケーション固有のコマンド群を持つ代わりに汎用のcomposer create-projectを使用しています。</p>

<p>スクリーンキャストも用意しました。ご覧ください。</p>

<p>BEAR.Sundayの総合パッケージであるBEAR.PackageのインストールしてからMyAppというアプリケーションを作成してます。作成した後にコンソールでHTMLの確認、built in web serverでそのwebサイトを確認しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP ソフトウェアメトリック]]></title>
    <link href="http://koriym.github.io/php-software-metric"/>
    <updated>2013-02-06T00:00:00+09:00</updated>
    <id>http://koriym.github.io/php-%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e3%83%a1%e3%83%88%e3%83%aa%e3%83%83%e3%82%af</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/php-software-metric">Tweet</a>
</div>


<h2>ソフトウェアメトリック</h2>

<blockquote><p>ソフトウェア測定法（ソフトウェアそくていほう）またはソフトウェアメトリック（英: Software metric ）とは、ソフトウェアやその仕様の属性の尺度である。<br/>
定量的手法の威力は他の分野で証明されていたことから、計算機科学の分野でも同様の手法をソフトウェア開発に持ち込もうとする努力が続けられてきた。Tom DeMarco は「測定できないものは制御できない」と記している。</p>

<p>&#8212; <a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E6%B8%AC%E5%AE%9A%E6%B3%95">Wikipedia ソフトウエア測定法</a></p></blockquote>

<p>ソフトウェア工学の祖の一人であるトム・デマルコは名著『品質と生産性を重視したソフトウェア開発プロジェクト技法』をこの有名な一文「<strong>測定できないものは制御できない</strong>」で始めました。1987年のことです。</p>

<h2>phpdepend</h2>

<p>ソフトウエア品質を客観的・機械的に計ろうとするPHPのメトリクスツールにphpdependがあります。<br/>
<a href="http://pdepend.org/">http://pdepend.org/</a></p>

<p>本体の紹介の中でこのように述べてます。</p>

<blockquote><p>PHP_Depend can be used in an automated build environment and the generated reports are always objective, it just measures the quality facts of a given source base.</p>

<p>PHP_Depend scales with growing source bases, where human code reviews will fail at some day.</p>

<p>PHP_Depend allows you to indentify suspect parts in a software system that should be part of a code review, without looking into the source.</p>

<p>PHP_Depend also supports some fancy metrics that will become very useful, when you have reached certain level of metrics knowledge.</p></blockquote>

<p>このツールを使いソースコードを解析すると２つの画像(svg)ファイルが得られます<strong>。Abstraction Instability Chart</strong>と<strong>Overview Pyramid</strong>の２つです。</p>

<h2>Abstraction Instability Chart</h2>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/report-a-i-chart.png" alt="report-a-i-chart" class="aligncenter size-full wp-image-1607" />
Abstraction Instability Chartは横軸にA &#8211; abstraction（抽象化）、縦軸に I &#8211; Instabilityのグラフです。このAを理解するためにまず二つの数字を理解する必要があります。CaとCeです。</p>

<p><strong>Ca &#8211; Afferent Couplings:</strong><br/>
このパッケージに依存した他のパッケージがいくつあるかという数字です。高い数値は仕様変更が他に影響を与えるパッケージが多いということを表します。</p>

<p><strong>Ce &#8211; Efferent Couplings:</strong><br/>
このパッケージが依存するパッケージはいくつあるかという数字です。高い数値は他のパッケージの影響を受けやすいということを表します。</p>

<p><img style="display:block;" src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CaCeIllustration.jpg" alt="CaCeIllustration" class="aligncenter size-full wp-image-1595" />
この２つの数字を使って次のIが求められます。</p>

<p><strong>I -Instability </strong> &#8211; パッケージの不安定性を表します。Iは0～1をとり値が大きいほど不安定なパッケージとされ、この数値は(Ce / (Ce + Ca)) として求められます。</p>

<p>横軸のAは抽象度を表します。</p>

<p><strong>A &#8211; Abstractness</strong> = 抽象象クラス数(AC) / 具象クラス(CC) + 抽象クラス数(AC)</p>

<h3>Main Sequence</h3>

<p>グラフに(0,1)と(1,0)を結ぶ直線をひきます。これがMain Sequenceと言われるラインでAとIのバランスの理想的な関係を表します。この線からの距離が大きいと「抽象度が高いがあまり利用されていない」「抽象度が低いが他からの依存が強い」など「抽象度と依存度の関係」が不適切という事を表します。</p>

<p>そのパッケージのサイズが丸の大きさで表されるので、重要なパッケージに注目することができます。</p>

<h2>各フレームワークのA/Iチャート</h2>

<p>実際に取ってみました。ソースは<a href="https://github.com/koriym/php-framework-metric">https://github.com/koriym/php-framework-metric</a>です。※画像はSVGファイルなので単独で表示させ拡大するとパッケージ名の文字も読めます。</p>

<h3>symfony</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/symfony-jdepend.svg" alt="symfony-jdepend" class="aligncenter size-full wp-image-1633" /></p>

<h3>zf2</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/zf2-jdepend.svg" alt="zf2-jdepend" class="aligncenter size-full wp-image-1637" /></p>

<h3>cakephp</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/cakephp-jdepend.svg" alt="cakephp-jdepend" class="aligncenter size-full" /></p>

<h3>CodeIgniter</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CodeIgniter-jdepend.svg" alt="CodeIgniter-jdepend" class="aligncenter size-full wp-image-1625" /></p>

<h3>fuel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/fuel-jdepend.svg" alt="fuel-jdepend" class="aligncenter size-full wp-image-1627" /></p>

<h3>laravel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/laravel-jdepend.svg" alt="laravel-jdepend" class="aligncenter size-full wp-image-1629" /></p>

<h3>Slim</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Slim-jdepend.svg" alt="Slim-jdepend" class="aligncenter size-full wp-image-1631" /></p>

<h3>yii</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/yii-jdepend.svg" alt="yii-jdepend" class="aligncenter size-full wp-image-1635" /></p>

<h3>Silex</h3>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-jdepend.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-jdepend.svg" alt="Silex-jdepend" class="aligncenter size-full wp-image-1644" /></a></p>

<h3>BEAR.Sunday</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-jdepend.svg" alt="bear-jdepend" class="aligncenter size-full wp-image-1621" /></p>

<h2>Overview Pyramid</h2>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg" alt="bear-pyramid" class="aligncenter size-full wp-image-1622" /></a><br/>
この&#8221;ピラミッッド図&#8221;の見方ですが、まず３つの部分に分かれてる事を理解します。</p>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-0.serendipityThumb.png" alt="logger.overview-pyramid-0.serendipityThumb" class="aligncenter size-full wp-image-1610" />
次にNOPやCALLなどまるでアセンブラのニーモニックのような謎の略語を理解します。</p>

<p>Size and Complexity（サイズと複雑度）</p>

<p><strong>NOP</strong> パッケージの数<br/>
<strong>NOC</strong> クラスの数<br/>
<strong>NOM</strong> メソッドの数<br/>
<strong>LOC</strong> コードの行数</p>

<p>Coupling（結合度）</p>

<p><strong>CYCLO</strong> <a href="http://ja.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E7%9A%84%E8%A4%87%E9%9B%91%E5%BA%A6">循環的複雑度</a><br/>
<strong>CALL</strong> メソッドあたりの呼び出し数<br/>
<strong>FOUT</strong> ファン・アウト (ある特定のメソッドが呼び出す他のメソッドの数)</p>

<p>Inheritance（継承）</p>

<p><strong>ANDC</strong> 直接の子孫の平均数<br/>
<strong>AHH</strong> 継承ツリーの平均の深さ</p>

<p>それらの値がピラミッドの中央に表示され、上段／下段の割合の数字が端に表示されます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-31.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-31.png" alt="logger.overview-pyramid-3" class="aligncenter size-full wp-image-1651" /></a>
数字には色が付けられ基準となる値の範囲に入ってない事を知らせてくれます。<br/>
これも同様に各フレームワークのチャートを用意しました。</p>

<h3>Symfony</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/symfony-pyramid.svg" alt="symfony-pyramid" class="aligncenter size-full wp-image-1634" /></p>

<h3>zf2</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/zf2-pyramid.svg" alt="zf2-pyramid" class="aligncenter size-full wp-image-1638" /></p>

<h3>cakephp</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/cakephp-pyramid.svg" alt="cakephp-pyramid" class="aligncenter size-full wp-image-1624" /></p>

<h3>CodeIgniter</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CodeIgniter-pyramid.svg" alt="CodeIgniter-pyramid" class="aligncenter size-full wp-image-1626" /></p>

<h3>fuel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/fuel-pyramid.svg" alt="fuel-pyramid" class="aligncenter size-full wp-image-1628" /></p>

<h3>Silex</h3>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-pyramid.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-pyramid.svg" alt="Silex-pyramid" class="aligncenter size-full wp-image-1645" /></a></p>

<h3>laravel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/laravel-pyramid.svg" alt="laravel-pyramid" class="aligncenter size-full wp-image-1630" /></p>

<h3>Yii</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/yii-pyramid.svg" alt="yii-pyramid" class="aligncenter size-full wp-image-1636" /></p>

<h3>Slim</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Slim-pyramid.svg" alt="Slim-pyramid" class="aligncenter size-full wp-image-1632" /></p>

<h3>BEAR.Sunday</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg" alt="bear-pyramid" class="aligncenter size-full wp-image-1622" /></p>

<h2>ソフトウエア品質はツールによって測定できるか</h2>

<p>これには様々な議論があることも紹介します。この議論もとても興味深いものです。</p>

<ul>
<li><a href="http://blogs.itmedia.co.jp/hiranabe/2009/07/---by-tom-demar.html">「測定できないものは制御できない｣は誤りだった。&#8211; by Tom Demarco<br/>
</a></li>
<li>　<a href="http://d.hatena.ne.jp/january/20090720/1248076466">「測定できないものは制御できない｣は誤り？</a></li>
</ul>


<p>今回各フレームワークのチャート図を作ってみました。それぞれのフレームワークの傾向が出て面白いとも思うのですが<sup><a href="#footnote_0_1586" id="identifier_0_1586" class="footnote-link footnote-identifier-link" title="特にsymfony/zf2/cakephpのLOCが圧巻です">1</a></sup>、特に自分や自分のチームの開発しているソフトウエアに適用してその傾向や特徴を探る事も大事かと思います。ミニマムブートストラップを探る<a href="http://www.bear-project.net/blog/2011/08/php-hello-world%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B0%E3%83%A9%E3%83%952011/">HelloWorldベンチマーク</a>と同様です。</p>

<p>参考URL</p>

<ul>
<li><a href="http://www.ibm.com/developerworks/jp/java/library/j-eaed6/index.html">http://www.ibm.com/developerworks/jp/java/library/j-eaed6/index.html<br/>
</a></li>
<li><a href="http://manuel-pichler.de/archives/31-Using-the-Overview-Pyramid.html">http://manuel-pichler.de/archives/31-Using-the-Overview-Pyramid.html</a></li>
</ul>


<ol class="footnotes">
  <li id="footnote_0_1586" class="footnote">
    特にsymfony/zf2/cakephpのLOCが圧巻です [<a href="#identifier_0_1586" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 12: debug print]]></title>
    <link href="http://koriym.github.io/adv12"/>
    <updated>2012-12-18T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-12-debug-print</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv12">Tweet</a>
</div>


<h2>デバック表示 p($var);</h2>

<p>BEAR.Sundayは前バージョンからの伝統(?)のデバック出力<strong>p();</strong>があります。<br/>
表示はxdebugのvar_dump()と同じですが加えて、変数名とp()した場所が表示されます。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">p</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>webでp()すると</strong><br/>
<a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-17-23-31-50/" rel="attachment wp-att-1505"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/a0f4eafe84c70f36f0bb364cfbac6e9f.png" alt="スクリーンショット 2012-12-17 23.31.50" class="aligncenter size-full wp-image-1505" /></a></p>

<p><strong>コンソールでp()すると</strong></p>

<div>
</div>


<p><a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-17-23-34-23/" rel="attachment wp-att-1507"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/35ee0b02f38504093b38b4eea755e8f3.png" alt="スクリーンショット 2012-12-17 23.34.23" class="aligncenter size-full wp-image-1507" /></a> <div>
</div></p>

<p>引き数なしでp()すると(void)と表示されます。</p>

<p><a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-18-0-26-19/" rel="attachment wp-att-1510"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/a6c3d84bee8a4d686cbadd8e643d9f43.png" alt="スクリーンショット 2012-12-18 0.26.19" class="aligncenter size-full wp-image-1510" /></a><br/>
その場所を通ったかどうかの確認になります。</p>

<p>表示されたファイル名はクリックしてweb上で編集できデバック表示したp()を消したり表示内容を変更したりできます。<br/>
<a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-18-0-35-26/" rel="attachment wp-att-1522">
  </a><a href="http://www.bear-project.net/blog/wp-content/uploads/2012/12/6cc52f92b203a81ef57231115a153620.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/6cc52f92b203a81ef57231115a153620.png" alt="スクリーンショット 2012-12-18 0.37.16" class="aligncenter size-full wp-image-1533" /></a></p>

<h2>
  デバック表示
</h2>


<p>  「変数内容を画面上で確認」IDE+Debuggerでもっと洗練された内容確認の仕方やTDDを実践したあとでも、この原始的なやり方を手放す事ができません。</p>

<p>  一方、デバック情報を画面に表示するときの問題「どれがどの表示を表してるのか分からなくなった」「どこでかいたのか分からない」「エディタに戻ってまた消すのが面倒」&#8230;それらの解決とコーディング作業の中断を0.1秒単位で削りたいという考えからこのp()を作りました。</p>

<p>  前回バージョンのSaturdayで好まれた機能です。Sundayでは表示変更とコンソール表示のサポートを追加しました。その他は以前のものと編集できたところも含めて同じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 11: DI: Why not ?]]></title>
    <link href="http://koriym.github.io/adv11"/>
    <updated>2012-12-13T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-11-diwhy-not</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv11">Tweet</a>
</div>


<h2>ミッション</h2>

<p>BEAR.Sundayは非常に現実的なミッションがあって、スキルが多様なチームで最大限のパフォーマンス（制作、運用）を出す事が求められます。難しい要求なのですが、これはゴールであって前提でもあります。</p>

<p>もっと平たく言うと、スキルの高い人だけが使える”難しい”ものにできません。<br/>
またどんな奇麗な設計でも実運用でパフォーマンスが出ないと導入できません。</p>

<p>このミッションとDIがどのように関係してるのかを考察します。</p>

<h2>何故DIを使わないか？</h2>

<p>DIの利点や理解を促進する記事は多いですが、ここではまず何故DIを使わないかを考察してみます。その理由を解決すれば良いと単純に考えてみます。</p>

<h2>問題：面倒、難しい</h2>

<p>「面倒」と「難しい」は全く違う問題なのですが、これを一緒に解決します。つまり前回までの記事で「生成」と「利用」に分離されたDIのパターンでは面倒＆難しいという問題はほぼ全て「生成」、つまりコンパイルに集中しています。コードや実行時間だけでなく、まず作成者を区別することを考えてみます。</p>

<h3>アプリケーション・アーキテクト</h3>

<p>ライブラリを選択し、抽象と束縛し、必要なアダプターを記述します。これらはよりスキルのいる仕事でもありますがより再利用性の高い仕事でもあります。ここをアプリケーションアーキテクトが担当します。あるいはアプリケーションを横断するパッケージ、そのまたさらにBEAR.Sundayフレームワーク開発者<sup><a href="#footnote_0_1465" id="identifier_0_1465" class="footnote-link footnote-identifier-link" title="つまり自分なのですが">1</a></sup>が担当します。アプリケーションを記述するアプリケーションエンジニアは基本は用意されたパッケージを利用する事に集中し、コンパイルタイムで行われる仕事は原則しません。</p>

<p>つまり現在のBEAR.PackageであればSQLを記述し、テンプレートを用意し、用意されたサービスオブジェクトとアノテーションに束縛された@Cacheアドバイスなどを利用しアプリケーションを記述します。特定ドメインにフォーカスしてビジネスロジックとその表現に関わることにコーディングを集中させます。</p>

<h3>易しい依存の利用</h3>

<p>一旦アプリケーション・アーキテクトがまとめ上げた制約は再利用が可能です。BEAR.SundayのDIはオブジェクトを利用するのに最低限の記述しか必要としません。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// トレイトで</span>
</span><span class='line'><span class="k">use</span> <span class="nx">LogInject</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">TmpDirInject</span><span class="p">;</span>
</span><span class='line'><span class="c1">// メソッドで</span>
</span><span class='line'><span class="o">/&lt;</span><span class="nx">em</span><span class="o">&gt;*</span>
</span><span class='line'> <span class="o">*</span> <span class="o">@</span><span class="nx">Inject</span>
</span><span class='line'> <span class="o">&lt;/</span><span class="nx">em</span><span class="o">&gt;/</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setLog</span><span class="p">(</span><span class="nx">LogInterface</span> <span class="nv">$log</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nv">$this</span><span class="o">-&amp;</span><span class="nx">gt</span><span class="p">;</span><span class="nx">log</span> <span class="o">=</span> <span class="nv">$log</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">code</span><span class="o">&gt;&lt;/</span><span class="nx">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>特定の抽象に束縛済みの依存があるなら再利用可能です。同じ依存がある新しいクラスを書くときにコンパイルに関わる記述の必要はありません。use文か、インターフェイスに@Injectアノテーションを打つと依存を受け取ることができます。</p>

<p>依存を利用するだけなら、特定のDependency Injector機構やその設定ファイルのフォーマットを理解する必要はありません。利用コードだけで依存を受け取れます。</p>

<h3>仕事の80%はメンテナンス</h3>

<p>三ヶ月で開発されたサービスが数年単位でメンテナンスされます。担当は代わり、プログラマーは内部外部問わず交代します。そしてメンテナンスの仕事の多くは生成ではなく、利用コードの変更です。</p>

<p>全ての仕事を一人で担当する場合でも、再利用性の高いコンパイルに関連するコードと利用コードが分かれている事はメリットになります。ずっと手を入れてない（忘れてる）コードを触る時でもまずは利用コードの理解だけに集中できます。</p>

<h2>問題：パフォーマンス</h2>

<p>オブジェクトグラフの再利用する設計でパフォーマンス上の問題はあまりありません。逆により高いパフォーマンスが望める場合が多いと思います。</p>

<h2>どうでしょうか？</h2>

<p>話をフェアにするためにBEAR.SundayのDIがうまく解決できない問題も述べます。アノテーションベースのDIシステムに共通の問題なのですが、「<a href="http://code.google.com/p/google-guice/wiki/FrequentlyAskedQuestions">ロボットの足問題</a>」と呼ばれる問題があります。これは同じような依存の少しだけ違う依存をどうやって束縛するかという問題で解決できるのはできるのですが、記述は冗長です。もっとうまい解決があるべきだと考えます。<sup><a href="#footnote_1_1465" id="identifier_1_1465" class="footnote-link footnote-identifier-link" title="問題は表面化してません。">2</a></sup></p>

<p>「難しい、面倒、遅い」これらのそれなりの解答になってるでしょうか。また他にどういう問題があるでしょうか？あれば解決法を考えましょう。dependentがクリーンなDIは、インジェクトの仕組みをより良いものに丸ごとアップデートできる可能性があります。</p>

<p>アノテーションベースのRay.Diの現在のBEAR.Sundayクラスも設定ファイルベースのAura.Diに変更することは原理的に可能です。depedentに注入機構の依存がないためです。</p>

<ol class="footnotes">
  <li id="footnote_0_1465" class="footnote">
    つまり自分なのですが [<a href="#identifier_0_1465" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1465" class="footnote">
    問題は表面化してません。 [<a href="#identifier_1_1465" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
</feed>
