<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BEAR Blog]]></title>
  <link href="http://koriym.github.io/atom.xml" rel="self"/>
  <link href="http://koriym.github.io/"/>
  <updated>2013-10-31T22:15:53+09:00</updated>
  <id>http://koriym.github.io/</id>
  <author>
    <name><![CDATA[Akihito Koriyama]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[BEAR.Sunday England Tour 2013]]></title>
    <link href="http://koriym.github.io/2013/09/bear-sunday-england-tour-2013/"/>
    <updated>2013-09-26T00:00:00+09:00</updated>
    <id>http://koriym.github.io/2013/09/bear-sunday-english-tour-2013</id>
    <content type="html"><![CDATA[<div id='fb-root'></div>


<script>(function(d, s, id) {
  var js, fjs = d.getElementsByTagName(s)[0];
  if (d.getElementById(id)) return;
  js = d.createElement(s); js.id = id;
  js.src = '//connect.facebook.net/en_US/all.js#xfbml=1';
  fjs.parentNode.insertBefore(js, fjs);
}(document, 'script', 'facebook-jssdk'));</script>


<div class='fb-post' data-href='https://www.facebook.com/permalink.php?id=110116939178462&story_fbid=168349486688540 '></div>




<br clear="all" />  


<p>無名の個人が作った無名のフレームワークをこれだけの規模のカンファレンスで発表するというのを聞いた事がありません。そもそも「誰も新しいフレームワークに興味が無い」というこで、新しいどころか世界の誰もが知っているフレームワークが200を超えるCfPの中で落選してる事も知りました。</p>

<p>そこでこういう言葉でセッションを始めることにしました。紹介します。</p>

<blockquote><p>It’s an honor to be here as a speaker.<br/>
But, some of you guys may wonder (or may have doubts) about an unknown person talking about an unknown framework.<br/>
 But I’m not here to teach you how to use my framework. No .<br/>
 <br/>
I’m here to share this new way of thinking, a new way of solving the web problem.<br/>
How do we look at the problem.</p>

<p>Yes, It’s about outlook.</p>

<p>Ok let’s start.</p></blockquote>

<p>こういう機会を得られたのはリチャードさんという素晴らしい開発者のこれまでのコミュニティに対するコントリビュートがあり、彼のアクションに周りの信認があるからだと思ってます。そのリチャードさんにphpmatsuriというイベントで出会う事ができ交流を持てた事も縁です。</p>

<p>機会や縁に感謝しつつ、挑戦の旅に出かけます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PEAR]]></title>
    <link href="http://koriym.github.io/pear"/>
    <updated>2013-08-25T00:00:00+09:00</updated>
    <id>http://koriym.github.io/pear</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/pear">Tweet</a>
</div>


<h2>What is PEAR ?</h2>

<p>公式サイトのトップページに、PEARとはなにかがこのように説明されています。</p>

<blockquote><p><strong>What is PEAR ?</strong></p>

<p>PEAR is a framework and distribution system for reusable PHP components.</p>

<p>PEARはフレームワークであり、再利用可能なPHPコンポーネントのディストリビューションシステムです。</p></blockquote>

<p>PEARの持つ２つの側面。<strong>フレームワーク</strong>、<strong>ディストリビューションシステム</strong>と簡潔に説明されています。</p>

<h2>PEARの誤解</h2>

<p>PEARは一般にいくつか誤解されてるようです。</p>

<h3>グローバル</h3>

<p>PEARはグローバル専用でなく、「ひとつのプロジェクトにおける依存関係を管理」に利用することは可能です。特殊なHackなどではなく、<a href="http://pear.php.net/manual/ja/installation.shared.php">標準で用意された方法</a>です。</p>

<p>.pearrcをconfig-createで作って、オプションで指定するだけです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pear config-create /path/to/pear .pearrc
</span><span class='line'><span class="nv">$ </span>pear -c /path/to/pear/.pearrc install PEAR
</span><span class='line'><span class="nv">$ </span>pear -c /path/to/pear/.pearrc install PEAR Cache_Lite
</span></code></pre></td></tr></table></div></figure>


<p>BEAR.Saturdayでも<a href="http://code.google.com/p/bear-project/wiki/Install">ユーザー環境へのインストール</a>を紹介していて、実際多くのプロジェクトがプロジェクト単位で構築されて駆動しています。</p>

<h3>チャンネル</h3>

<p>作成したパッケージをwebでサービスするために、<strong>パッケージ登録のための投票</strong>を受ける必要はありません。それは公式のチャネル pear.php.netでの話です。公式に載せていない、独自のチェンネルでサービスをしているパッケージも沢山あります。BEAR.Satuday <a href="http://pear.bear-project.net/">http://pear.bear-project.net/</a> もその一つです。</p>

<p>どちらも改善の余地はあるものだったのでしょうが、機能的には可能でした。またPEARの大きな特徴として<strong>後方互換性の完全な維持</strong>がありました。</p>

<h3>BCブレイク</h3>

<p>PEARは後方互換性を破らないという厳しいルールがありました。BEAR.Saturdayは沢山の依存PEARパッケージがあり、数えきれないほどPEAR upgradeしましたが問題が出た記憶がほとんどありません。 バージョンが.1あがったら互換性でエラーだらけになるような事は決してありませんでした。</p>

<p>依存管理で正確なバージョンを特定しなくても、最新バージョンを入れれば機能しました。しかしこれは、そこまで厳格でないパッケージの依存を扱う時に困った事になります。composer.lockのような機構はありませんでした。PEARのような高い品質を持ったライブラリ同士でなければ問題になってしまいます。</p>

<h2>PEARはフレームワーク</h2>

<p>PEARはコード作成に関する標準スタイルや共通のエラーメカニズム、バージョニング、ディストリビューションをも含んだ包括的なフレームワークです。Internet ArchiveによるとPEARに初出は2001年です。こんなに速い時期からこんなフレームワークが提供できたのはPHPコミュニティの誇れる歴史です。</p>

<p>後に続く非PEARのアプリケーションフレームワークやライブラリは、この偉大な先輩にリスペクトを持ったものと、全く持たないものがありました。コーディング規約やフォルダ構造を見れば分かります。<sup><a href="#footnote_0_2204" id="identifier_0_2204" class="footnote-link footnote-identifier-link" title="BEARは前者です">1</a></sup> 例えばPEARのフォルダ構造はPseudo-namespace(PHP5.3以前のなんちゃって名前空間）に従ったもので一貫性がありauto loaderが簡単に実装できましたが、独自のフォルダ構造をもちクラスファイルの読み込みに大変なコストがかかるものもありました。<sup><a href="#footnote_1_2204" id="identifier_1_2204" class="footnote-link footnote-identifier-link" title="何のための逸脱なのか分かりません">2</a></sup></p>

<p>ただ、その高すぎる理想と、GitHubを中心とした新しいコーディング文化、PHP5.3以降のライブラリ群の依存要求、Pyrus移行の失敗、など様々な要因によってPHPの依存管理の主役の座をComposerに明け渡す事になります。</p>

<p>しかしPEARは当時の<strong>PHPの最良</strong>を提供しようとした、意欲的で完成度の高い包括的なエコシステムです。今のPSRやコーディングにも多くの影響を与えています。単に古く間違ったプラクティスとして忘れてしまおうという考えには賛同できません。主役の座は受け渡しましたが、今でもいくつものライブラリは有用だしディストリビューションシステムとしても健全で機能します。公式サイトでホストされてるライブラリは複数のレビュアーが承認した質の高いコードで、コードリーディングのテキストとしても有用です。</p>

<p>PEARはPHPコミュニティの誇れるべき財産だと考えます。</p>

<ol class="footnotes">
  <li id="footnote_0_2204" class="footnote">
    BEARは前者です [<a href="#identifier_0_2204" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_2204" class="footnote">
    何のための逸脱なのか分かりません [<a href="#identifier_1_2204" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ray.Tutorial &#8211; First DI framework]]></title>
    <link href="http://koriym.github.io/first-di-framework"/>
    <updated>2013-08-17T00:00:00+09:00</updated>
    <id>http://koriym.github.io/ray-tutorial-first-di-framework</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;"><a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/first-di-framework">Tweet</a></div>


<h1>初めてのDIフレームワーク</h1>


<h2>準備</h2>


<ol>
<li>PHP5.4+で動作します。mysqlで予め<a href="https://github.com/koriym/Ray.Tutorial/blob/master/doc/todo.sql">テーブルを作成</a>しておきます。
2 フォルダをつくります。</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir ray.tutorial
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>ray.tutorial
</span></code></pre></td></tr></table></div></figure>


<p>まずは手動でインジェクションするコード<a href="https://github.com/koriym/Ray.Tutorial/blob/develop/src/todo2-manual-injection.php">ソース</a>を入力して実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var PDO</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param PDO $pdo</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PDO</span> <span class="nv">$pdo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param string $todo things to do</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$todo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s1">&#39;INSERT INTO TODO (todo) VALUES (:todo)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="s1">&#39;:todo&#39;</span><span class="p">,</span> <span class="nv">$todo</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;Get laundry&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>実行してみます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">php</span> <span class="nx">manual</span><span class="o">-</span><span class="nx">di</span><span class="o">.</span><span class="nx">php</span>
</span></code></pre></td></tr></table></div></figure>


<p>データベースにtodoが入力されたか、コンソールかツール等で確認します。<sup><a href="#footnote_0_2143" id="identifier_0_2143" class="footnote-link footnote-identifier-link" title="あるいはSELECTをするメソッドを追加してください！">1</a></sup>
確認できましたか？OK?
では、次にcomposerのプロジェクトを作ってこのクラスをDI化してみましょう。</p>

<h2>composerでRay.Di依存の空プロジェクトを作る</h2>


<p>まずはcomposerをダウンロードします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -sS https://getcomposer.org/installer | php
</span></code></pre></td></tr></table></div></figure>


<p>composerを使ってRay.Diを使うプロジェクトを作ります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php composer.phar init
</span></code></pre></td></tr></table></div></figure>


<p>すると色々質問されるので、ray/diのバージョン* (最新の安定板)をインストールするように答えます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>  <span class="nx">Welcome</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">Composer</span> <span class="nx">config</span> <span class="nx">generator</span>
</span><span class='line'><span class="k">This</span> <span class="nx">command</span> <span class="nx">will</span> <span class="nx">guide</span> <span class="nx">you</span> <span class="nx">through</span> <span class="nx">creating</span> <span class="nx">your</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">json</span> <span class="nx">config</span><span class="o">.</span>
</span><span class='line'><span class="nx">Package</span> <span class="nx">name</span> <span class="p">(</span><span class="o">&lt;</span><span class="nx">vendor</span><span class="o">&gt;/&lt;</span><span class="nx">name</span><span class="o">&gt;</span><span class="p">)</span> <span class="p">[</span><span class="nx">akihito</span><span class="o">/</span><span class="nx">ray</span><span class="o">.</span><span class="nx">tutorial</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'><span class="nx">Description</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="nx">Author</span> <span class="p">[</span><span class="nx">Akihito</span> <span class="nx">Koriyama</span> <span class="o">&lt;</span><span class="nx">akihito</span> <span class="o">.</span><span class="nx">koriyama</span><span class="o">@</span><span class="nx">gmail</span><span class="o">.</span><span class="nx">com</span><span class="o">&gt;</span><span class="p">]</span><span class="o">:</span>
</span><span class='line'><span class="nx">Minimum</span> <span class="nx">Stability</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="nx">License</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="nx">Define</span> <span class="nx">your</span> <span class="nx">dependencies</span><span class="o">.</span>
</span><span class='line'><span class="nx">Would</span> <span class="nx">you</span> <span class="nx">like</span> <span class="nx">to</span> <span class="nb">define</span> <span class="nx">your</span> <span class="nx">dependencies</span> <span class="p">(</span><span class="k">require</span><span class="p">)</span> <span class="nx">interactively</span> <span class="p">[</span><span class="nx">yes</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span> <span class="nx">ray</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'><span class="nx">Found</span> <span class="mi">15</span> <span class="nx">packages</span> <span class="nx">matching</span> <span class="nx">ray</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="nx">ray</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="nx">ray</span><span class="o">/</span><span class="nx">aop</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="nx">jms</span><span class="o">/</span><span class="nx">di</span><span class="o">-</span><span class="nx">extra</span><span class="o">-</span><span class="nx">bundle</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="nx">aura</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="nx">orno</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="nx">league</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="nx">mnapoli</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="nx">zendframework</span><span class="o">/</span><span class="nx">zend</span><span class="o">-</span><span class="nx">di</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="nx">mnapoli</span><span class="o">/</span><span class="nx">php</span><span class="o">-</span><span class="nx">di</span><span class="o">-</span><span class="nx">zf1</span>
</span><span class='line'>   <span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="nx">ocramius</span><span class="o">/</span><span class="nx">ocra</span><span class="o">-</span><span class="nx">di</span><span class="o">-</span><span class="nx">compiler</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="nx">lcobucci</span><span class="o">/</span><span class="nx">di</span><span class="o">-</span><span class="nx">builder</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="nx">aimfeld</span><span class="o">/</span><span class="nx">di</span><span class="o">-</span><span class="nx">wrapper</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="nx">kdyby</span><span class="o">/</span><span class="nx">autowired</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">13</span><span class="p">]</span> <span class="nx">seiffert</span><span class="o">/</span><span class="nx">console</span><span class="o">-</span><span class="nx">extra</span><span class="o">-</span><span class="nx">bundle</span>
</span><span class='line'>  <span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="nx">vojtech</span><span class="o">-</span><span class="nx">dobes</span><span class="o">/</span><span class="nx">extensions</span><span class="o">-</span><span class="k">list</span>
</span><span class='line'><span class="nx">Enter</span> <span class="nx">package</span> <span class="c1"># to add, or the complete package name if it is not listed []: 0</span>
</span><span class='line'><span class="nx">Enter</span> <span class="nx">the</span> <span class="nx">version</span> <span class="nx">constraint</span> <span class="nx">to</span> <span class="k">require</span> <span class="p">[]</span><span class="o">:</span> <span class="o">*</span>
</span><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="nx">Would</span> <span class="nx">you</span> <span class="nx">like</span> <span class="nx">to</span> <span class="nb">define</span> <span class="nx">your</span> <span class="nx">dev</span> <span class="nx">dependencies</span> <span class="p">(</span><span class="k">require</span><span class="o">-</span><span class="nx">dev</span><span class="p">)</span> <span class="nx">interactively</span> <span class="p">[</span><span class="nx">yes</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;akihito/ray.tutorial&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;require&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;ray/di&quot;</span><span class="o">:</span> <span class="s2">&quot;*&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;authors&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="s2">&quot;Akihito Koriyama&quot;</span><span class="p">,</span>
</span><span class='line'>            <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="s2">&quot;akihito.koriyama@gmail.com&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">Do</span> <span class="nx">you</span> <span class="nx">confirm</span> <span class="nx">generation</span> <span class="p">[</span><span class="nx">yes</span><span class="p">]</span><span class="o">?</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">akihito</span><span class="o">&gt;&lt;/</span><span class="nx">name</span><span class="o">&gt;&lt;/</span><span class="nx">vendor</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>入力の必要な質問はこれだけでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Search</span> <span class="k">for</span> <span class="nx">a</span> <span class="nx">package</span> <span class="p">[]</span><span class="o">:</span> <span class="nx">ray</span><span class="o">/</span><span class="nx">di</span>
</span><span class='line'><span class="nx">Enter</span> <span class="nx">package</span> <span class="c1"># to add, or the complete package name if it is not listed []: 0</span>
</span><span class='line'><span class="nx">Enter</span> <span class="nx">the</span> <span class="nx">version</span> <span class="nx">constraint</span> <span class="nx">to</span> <span class="k">require</span> <span class="p">[]</span><span class="o">:</span> <span class="o">*</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると最後に表示されたcomposer.jsonが出来上がりますが、まだray/diはインストールされていません。installコマンドでインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">php</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">phar</span> <span class="nx">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>initコマンドで作成したcomposer.jsonに従ってRay.Diとその依存ファイルとダウンロードされ、現在の依存の状態が記録されたcomposer.lockファイル、それにautoloaderを含むcomposerのファイル群もインストールされました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="err">$</span> <span class="nx">tree</span> <span class="o">-</span><span class="nx">L</span> <span class="mi">2</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">json</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">lock</span>
</span><span class='line'><span class="err">├──</span> <span class="nx">composer</span><span class="o">.</span><span class="nx">phar</span>
</span><span class='line'><span class="err">└──</span> <span class="nx">vendor</span>
</span><span class='line'>    <span class="err">├──</span> <span class="nx">aura</span>
</span><span class='line'>    <span class="err">├──</span> <span class="nx">autoload</span><span class="o">.</span><span class="nx">php</span>
</span><span class='line'>    <span class="err">├──</span> <span class="nx">composer</span>
</span><span class='line'>    <span class="err">├──</span> <span class="nx">doctrine</span>
</span><span class='line'>    <span class="err">└──</span> <span class="nx">ray</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/koriym/Ray.Tutorial/blob/develop/src/todo3-ray-di.php">Ray.Diを使ったコード</a>を入力してsrc/フォルダを作ってその下に配置します。
src/todo3-ray-di.php</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Doctrine\Common\Annotations\AnnotationRegistry</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Ray\Di\AbstractModule</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Ray\Di\Injector</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Ray\Di\Di\Inject</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Ray\Di\Di\Named</span><span class="p">;</span>
</span><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">require</span> <span class="nb">dirname</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">AnnotationRegistry</span><span class="o">::</span><span class="na">registerLoader</span><span class="p">([</span><span class="nv">$loader</span><span class="p">,</span> <span class="s1">&#39;loadClass&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Inject</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PDO</span> <span class="nv">$pdo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param $todo</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$todo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s1">&#39;INSERT INTO TODO (todo) VALUES (:todo)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="s1">&#39;:todo&#39;</span><span class="p">,</span> <span class="nv">$todo</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Module</span> <span class="k">extends</span> <span class="nx">AbstractModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;PDO&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toInstance</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$injector</span> <span class="o">=</span> <span class="nx">Injector</span><span class="o">::</span><span class="na">create</span><span class="p">([</span><span class="k">new</span> <span class="nx">Module</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$todo</span> <span class="o">=</span> <span class="nv">$injector</span><span class="o">-&gt;</span><span class="na">getInstance</span><span class="p">(</span><span class="s1">&#39;Todo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="sd">/** @var $todo Todo */</span>
</span><span class='line'><span class="nv">$todo</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;Walking in Ray&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>これがRay.Diを使ってDIを行っているコードです。変わった部分をそれぞれ見て行きます。</p>

<h3>オートローダー</h3>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$loader</span> <span class="o">=</span> <span class="k">require</span> <span class="nb">dirname</span><span class="p">(</span><span class="nx">__DIR__</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39;/vendor/autoload.php&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">AnnotationRegistry</span><span class="o">::</span><span class="na">registerLoader</span><span class="p">([</span><span class="nv">$loader</span><span class="p">,</span> <span class="s1">&#39;loadClass&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>composerを使うと依存ファイルのオートローディングの設定が含まれた、vendor/autoload.phpというオートローダーのファイルが自動で生成されます。
Ray.Diのアノテーションは<a href="http://docs.doctrine-project.org/projects/doctrine-common/en/latest/reference/annotations.html">Doctrineのアノテーション</a>を使っています。アノテーションの読み込みにはオートローダーの登録が必要で、いくつかの方法がありますがここではcomposerのオートローダーをそのまま使っています。</p>

<h3>アノテーション</h3>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Inject</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PDO</span> <span class="nv">$pdo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span></code></pre></td></tr></table></div></figure>


<p>依存を受け取るメソッドには<strong>@Inject</strong>とアノテート（注釈）されています。Ray.Diはこのアノテーションを目印にして依存が必要なメソッドを割り出します。<sup><a href="#footnote_1_2143" id="identifier_1_2143" class="footnote-link footnote-identifier-link" title="コンストラクタ以外でも依存を受け取る事ができます。@Injectとアノテートしてメソッド名は何でもかまいません">2</a></sup>
アノテーションはクラスで、名前解決のためuse文が必要です。<sup><a href="#footnote_2_2143" id="identifier_2_2143" class="footnote-link footnote-identifier-link" title="Doctrineアノテーションの仕様です">3</a></sup></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">Ray\Di\Di\Inject</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<h3>モジュール</h3>


<p>モジュールでは依存を必要とする場所に依存をどう渡すかを記述します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Module</span> <span class="k">extends</span> <span class="nx">AbstractModule</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">configure</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bind</span><span class="p">(</span><span class="s1">&#39;PDO&#39;</span><span class="p">)</span><span class="o">-&gt;</span><span class="na">toInstance</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>AbstractModuleを継承したクラスのconfigure()というメソッド内で、bind()メソッドを使って依存を束縛（バインド＝結びつけます）します。ここではPDOクラスを必要とするインジェクションポイントに作成した$pdoインスタンスを束縛しています。
これによって<strong>アノテーション</strong>の節で説明したように@injectとアノテートされPDOクラスのタイプヒントを持つ引き数には$pdoインスタンスが渡されるようになります。</p>

<h3>インジェクター</h3>


<p>モジュールを使って作成した<strong>インジェクターは、どの依存が求められれば何を渡せばいいかを知っています</strong>。そのインジェクターを使って&#8217;Todo&#8217;クラスを取得するとインジェクターは必要とされる依存をモジュールで決めたルールで渡し、<strong>依存解決</strong>(dependency resolution)が行われます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$injector</span> <span class="o">=</span> <span class="nx">Injector</span><span class="o">::</span><span class="na">create</span><span class="p">([</span><span class="k">new</span> <span class="nx">Module</span><span class="p">]);</span>
</span><span class='line'><span class="nv">$todo</span> <span class="o">=</span> <span class="nv">$injector</span><span class="o">-&gt;</span><span class="na">getInstance</span><span class="p">(</span><span class="s1">&#39;Todo&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ついに出来ました！！！！
$todoオブジェクト！！！
依存の問題を解決（外部の変数を外側から渡す）を自動化するために、様々な事が必要になりました。
依存が必要な箇所にアノテーションが必要です。そのアノテーションクラスのオートローディング登録も必要で、モジュールでも依存の束縛の記述、束縛を使ったインジェクターの作成をしてようやく依存解決をするインジェクターが作成されました。
１つの問題を解決するためにこれだけの事をしたのです。<sup><a href="#footnote_3_2143" id="identifier_3_2143" class="footnote-link footnote-identifier-link" title="NateさんのLithiumのスライド A Framework for People who Hate Frameworks &ndash; Lithium もご覧下さい">4</a></sup>DIフレームワークはRayだけではありません。他のDIフレームワークも同じような、あるいはこれ以上の準備の手順の複雑さを持っています。</p>

<h3>オーバーエンジニアリング?</h3>


<p>オーバーエンジニアリング（作り込みのし過ぎ、過剰技術）でしょうか？
まず、他の技術同様に、<strong>説明のための単純な例で実利を感じる事は往々にして難しい</strong>事は頭に入れておく必要があります。例えば、HelloWorldのサンプルでフレームワークのメリットを実感する事はなかなか難しいでしょう。
DIフレームワークの使用がオーバーエンジアリングか、クラス名のハードコーディングがアンダーエンジニアリングなのか、その辺りの判断を直感で出すのはひとまず置いといて、Ray DIフレームワークの使い方の実例をもう少し見て行きましょう。
&#8230;続く</p>

<ol class="footnotes"><li id="footnote_0_2143" class="footnote">あるいはSELECTをするメソッドを追加してください！ [<a href="#identifier_0_2143" class="footnote-link footnote-back-link">&#8617;</a>]</li><li id="footnote_1_2143" class="footnote">コンストラクタ以外でも依存を受け取る事ができます。@Injectとアノテートしてメソッド名は何でもかまいません [<a href="#identifier_1_2143" class="footnote-link footnote-back-link">&#8617;</a>]</li><li id="footnote_2_2143" class="footnote">Doctrineアノテーションの仕様です [<a href="#identifier_2_2143" class="footnote-link footnote-back-link">&#8617;</a>]</li><li id="footnote_3_2143" class="footnote">NateさんのLithiumのスライド <a href="http://www.slideshare.net/jperras/tekx-a-framework-for-people-who-hate-frameworks-lithium">A Framework for People who Hate Frameworks &#8211; Lithium</a> もご覧下さい [<a href="#identifier_3_2143" class="footnote-link footnote-back-link">&#8617;</a>]</li></ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ray.Tutorial &#8211; introduction]]></title>
    <link href="http://koriym.github.io/ray-tutorial-introduction"/>
    <updated>2013-08-16T00:00:00+09:00</updated>
    <id>http://koriym.github.io/ray-tutorial1-introduction</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/ray-tutorial-introduction">Tweet</a>
</div>


<h1>Introduction</h1>

<p>BEAR.SundayのDIとAOP(Ray.Di)を理解するためのチュートリアルです。</p>

<p>最初に題材としてTodoクラスを作りました。$todo文字列を受け取ってデータベースに格納するだけのクラスです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param $todo</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$todo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s1">&#39;INSERT INTO TODO (todo) VALUES (:todo)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="s1">&#39;:todo&#39;</span><span class="p">,</span> <span class="nv">$todo</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">;</span>
</span><span class='line'><span class="nv">$todo</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;Pay bills&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>システムの可変点</h2>

<p>このプログラムはちゃんと動きますが、再利用性はどうでしょうか？<br/>
データベースの接続情報がプログラムに直接記述、<strong>ハードコーディング</strong>されてあるのは問題です。</p>

<p>他の部分は運用環境に変更があっても変わりませんが、DBの接続情報は変わります。<br/>
このようにプログラムには変更の可能性が高い場所とそうでも無い場所があります。</p>

<h3>定数を使う</h3>

<p>初期のシステムではこのようなシステムで変更部分のある情報を定数を使う事で解決していました。プログラムの初期化(bootstrap)ではdefineが並んだファイルを読み込みます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;PDO_DSN&#39;</span><span class="p">,</span> <span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用部分ではその情報を使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="nx">PDO_DSN</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>ハードコーディングされていた箇所は取り除かれ、コードはよりクリーンになりました！</p>

<p>定数ファイルをみると、そのシステムでの変更部分が集約されていて変更可能な箇所を一覧することもできます。可変点は集約され、DBの接続情報に変更があっても利用コード全体を調べる必要がなくなりました。</p>

<p>しかしdefineはスカラー値（float、string、boolean）しか定義できません。また <strong>グローバル</strong>定数なのでシステムのどの部分からもアクセスができます。</p>

<h3>Configureクラスを使う</h3>

<p>設定値をより柔軟に取り扱うためにConfigureクラスの導入を考えてみます。</p>

<p>Configureクラスは設定値の入れ物（コンテナ）を用意します。bootstrapでプログラムに必要な設定情報を設定ファイル(ini/yaml/php配列)を読み込んだりコードで直接代入したりして準備しておきます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="nx">Configure</span><span class="o">::</span><span class="na">read</span><span class="p">(</span><span class="s1">&#39;pdo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;dsn&#39;</span><span class="p">],</span> <span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">],</span> <span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用するときにはそのConfigureクラスとセットに使ったキーを使ってその値を取り出します。これで設定に配列も扱えるようになりました。設定の代入も多様な方法で行えます。</p>

<p>しかし一方で、このアプリケーションは依然として<strong>コード中のどこからでも同一の値にアクセスできるグローバルスコープの設定値</strong>を持っています。&#8221;コントローラだろうがモデルだろうがビューだろうがアプリケーション内のおおよそ全ての場所&#8221;から利用可能です。</p>

<h3>グローバル変数$_GLOBALSを使う</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$connection</span> <span class="o">=</span> <span class="nv">$_GLOBAL</span><span class="p">[</span><span class="s1">&#39;MYAPP&#39;</span><span class="p">][</span><span class="s1">&#39;pdo&#39;</span><span class="p">];</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;dsn&#39;</span><span class="p">],</span> <span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;user&#39;</span><span class="p">],</span> <span class="nv">$connection</span><span class="p">[</span><span class="s1">&#39;password&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>グローバル変数に抵抗がありますか？ グローバルスコープでどこからも参照できる変数という意味では、グローバル変数もConfigureクラスもあまり変わりません。実際CakePHPではこのような注意書きがあります。</p>

<blockquote><p>何でも保存でき、コード内のあらゆる場所で使用できるので、CakePHPのMVCパターンを崩してしまう誘惑には注意しましょう。</p></blockquote>

<p>グローバルスコープの変数、特にごく単純なものなら$_GLOBALSを使うのは自然です。ただ競合しないようにpresudo-namespace（prefixを使ったなんちゃって名前空間）を使うのがいいと思います。PEARでも使用例がいくつもあります。</p>

<p>しかし、defineもグローバル変数もConfigure専用クラスもグローバルスコープでどこでも参照できる点には代わりがありません。</p>

<h3>BEARでは</h3>

<p>前のバージョンのBEAR.Satudayではグローバルdefineが２つ（時間とアプリケーションパス）ありましたがBEAR.Sundayではありません。またConfigureクラスのようなどのクラスからも参照できるグローバルスコープの設定値専用の変数コンテナはありません。</p>

<h2>インスタンスの管理を考える</h2>

<p>次にインスタンスの管理を考えてみます。本来PDOオブジェクトはメソッド内で毎回newして新しいインスタンスを作る必要はありません。一度生成すればそのオブジェクトを再利用したいところです。</p>

<p>そこで、メソッドの生成・管理をメソッドに任せる事にします。「シングルトン」です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="k">private</span> <span class="nv">$instance</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">is_null</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>このようメソッドを各クラスに持って以下のように取得します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="nx">Db</span><span class="o">::</span><span class="na">getInstance</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>newでインスタンス生成が行われるのは一度だけで、次回以降は生成済みのインスタンスが渡されるだけです。</p>

<p>しかし、このようなシングルトンのコードはテストに向かない保守性の低いコードになってしまいます。<strong>コード中のどこからでも同一のインスタンスにアクセスするグローバルスコープのオブジェクト</strong>になっているからです。</p>

<p>オブジェクトの生成・管理がまとまった仕事であるなら、専用のクラスを持つのは自然な話です。<sup><a href="#footnote_0_2022" id="identifier_0_2022" class="footnote-link footnote-identifier-link" title="BEAR.Saturdayでは BEAR::Dependency">1</a></sup><br/>
例えばその専用クラスは以下のように使われます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Global registry</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="nx">ServiceContainer</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;pdo&#39;</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span>
</span><span class='line'><span class="c1">// Contextual dependency lookup (CDL)</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">app</span><span class="p">[</span><span class="s1">&#39;pdo&#39;</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>bootstrapでは何らかの方法でオブジェクトの生成の準備を完了させておき、取り出し&#8217;キー&#8217;と共にオブジェクトが取り出せる準備をしておきます。</p>

<p>利用する方は、これがシングルトンで渡されるかどうかを指定しません。またコンストラクタに初期値も渡しません。利用側ではオブジェクトをどう生成するかに関心を持たずに単に取り出し用のキー名指定するだけで利用できます。</p>

<h4>pros</h4>

<p>ここでは利用だけに注目しましょう。オブジェクトの生成方法ががどんなに複雑になっても、インスタンスの管理方法が変わっても、取得の方法に変化がありません。これを利用するクラスは保守性の高いコードになりやすいでしょう。</p>

<h4>cons</h4>

<p>一方、このコードだけを見ても$pdo変数は何のオブジェクトで何ができるのが分かりません。ServiceContainer::getのphpdocの@returnを見ても分かりません。ServiceContainerクラスの働きを理解して、何がどう&#8217;pdo&#8217;にセットされているか、コードかドキュメントから知る必要があります。Todoクラスの実行にはServiceContainerクラスが必要になりました。ユニットテストの時もServiceContainerクラスが必要です。クラス間の依存を減らす為に一つ依存が増えました。</p>

<h2>依存性の注入</h2>

<p>これまで、オブジェクトをどうやって作り、どうやって管理するか、というオブジェクトの生成と管理の視点でコードを見て来ました。様々なやり方を検討してきましが、いずれの方法も <strong>オブジェクトを生成するか、または他のクラスを使って取得</strong>していました。(Dependency Lookup) これから見るのは依存性の注入と呼ばれるパターンで、依存オブジェクトの取得は完全に受け身になります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Todo</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @var PDO</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param PDO $pdo</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">PDO</span> <span class="nv">$pdo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span> <span class="o">=</span> <span class="nv">$pdo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @param string $todo things to do</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">add</span><span class="p">(</span><span class="nv">$todo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">pdo</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="s1">&#39;INSERT INTO TODO (todo) VALUES (:todo)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">bindParam</span><span class="p">(</span><span class="s1">&#39;:todo&#39;</span><span class="p">,</span> <span class="nv">$todo</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;Get laundry&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>内部で必要なオブジェクトを<strong>ハードコード</strong>して生成/取得するのではなくて、クラスの外から依存が代入されています。<strong>DBオブジェクトがDBの接続情報文字列を可変点と考えたように、DBオブジェクト利用クラスにとってDBオブジェクトが可変点</strong>と考えます。</p>

<p>これが依存性の注入(dependency injection=DI)です。</p>

<p>「利用するインスタンスを外部から渡す」- DIの本質的なところはこれだけです！</p>

<p>ファウラーの「<a href="http://kakutani.com/trans/fowler/injection.html">Inversion of Control コンテナと Dependency Injection パターン</a>」を読んだ人はえ？っと思うのではないでしょうか。<sup><a href="#footnote_1_2022" id="identifier_1_2022" class="footnote-link footnote-identifier-link" title="かつての自分です">2</a></sup></p>

<p>それを揶揄した記事もあります。</p>

<blockquote><p><a href="http://www.jamesshore.com/Blog/Dependency-Injection-Demystified.html">&#8220;Dependency Injection&#8221; is a 25-dollar term for a 5-cent concept.</a><br/>
Dependency injection means giving an object its instance variables. Really. That&#8217;s it.</p></blockquote>

<p>依存性の注入はwikiではこのように説明されています。</p>

<blockquote><p>依存性の注入（いぞんせいのちゅうにゅう、英: dependency injection）とは、コンポーネント間の依存関係をプログラムのソースコードから排除し、外部の設定ファイルなどで注入できるようにするソフトウェアパターンである。</p>

<p>依存性の注入を利用したプログラムを作成する場合、コンポーネント間の関係はインターフェースを用いて記述し、具体的なコンポーネントを指定しない。具体的にどのコンポーネントを利用するかは別のコンポーネントや外部ファイル等を利用することで、コンポーネント間の依存関係を薄くすることができる。</p></blockquote>

<p>このwikiの説明はパターンの説明というよりもその実際の説明により過ぎてるように思います。英語版はもっと明快です。</p>

<blockquote><p>Dependency injection is a software design pattern that allows the removal of hard-coded dependencies and makes it possible to change them, whether at run-time or compile-time.<a href="http://kakutani.com/trans/fowler/injection.html">1</a></p>

<p>依存性の注入とはランタイムやコンパイルタイムでハードコードされた依存を取り除き変更可能にするためのソフトウエアデザインパターンの一つ</p></blockquote>

<p>上記のサンプルは設定ファイルもインターフェイスも出て来ませんが、DIを適用したコードです。英語版wikiの説明のよう<strong>ハードコードされた依存は取り除かれ、変更可能</strong>になっています。</p>

<h3>再びシングルトン</h3>

<p>同じオブジェクトを再利用するシングルトンもやってみましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$pdo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">PDO</span><span class="p">(</span><span class="s1">&#39;mysql:dbname=test;host=localhost&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'><span class="nv">$todo2</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Todo</span><span class="p">(</span><span class="nv">$pdo</span><span class="p">);</span>
</span><span class='line'><span class="o">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>同じオブジェクトを渡す事で、それぞれ別の利用クラスが同じ依存インスタンス($pdo)を使っています。依存クラスは利用クラスの外側で集中して管理されていて、PDOインスタンスの生成は一度だけです！</p>

<h2>問題を違う場所に移しただけ？</h2>

<p>&#8230;と、ここまで見て、確かにTodoクラスから依存が取り除かれコードはすっきりしました。テストもより簡単になったでしょう。</p>

<p>その代わり依存のややここしいところはオブジェクトの生成部分に依然あるし、設定値もハードコーディングされています。オブジェクトの利用から問題を取り除いた代わりに、オブジェクトの生成の部分が問題になったように見えないでしょうか。つまり依存の問題を解決したというより問題をある場所から違う場所に移しただけのように見えないでしょうか。</p>

<p>これらをRay.Di DI frameworkではどういう風に解決してるか、次回から見て行きます。</p>

<p>&#8230;続く</p>

<ol class="footnotes">
  <li id="footnote_0_2022" class="footnote">
    BEAR.Saturdayでは BEAR::Dependency [<a href="#identifier_0_2022" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_2022" class="footnote">
    かつての自分です [<a href="#identifier_1_2022" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BEAR.Sunday meetup #2]]></title>
    <link href="http://koriym.github.io/bearsunday_meetup2"/>
    <updated>2013-07-30T00:00:00+09:00</updated>
    <id>http://koriym.github.io/bear-sunday-meetup-2</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/bearsunday_meetup2">Tweet</a>
</div>




<div>
  <a href="http://www.bear-project.net/blog/wp-content/uploads/2013/07/723d615e8befaad76f94aebd6688651a.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/07/723d615e8befaad76f94aebd6688651a-1024x776.png" alt="BEAR.Sunday meetup #2 2013-07-28 3.06.12" class="size-large wp-image-1970" /></a>
    <a href="http://www.bear-project.net/blog/wp-content/uploads/2013/07/IMG_8334.jpg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/07/IMG_8334-1024x768.jpg" alt="IMG_8334" class="size-large wp-image-1976" /></a> </div>


<pre><code>&gt;
  Meetup
&lt;/h2&gt;
</code></pre>

<h2>Meetup</h2>

<p> BEAR.Sunday meetup#2を開催しました。</p>

<p> 学習より交流、啓蒙というよりアイデアの交換、勉強会というよりmeetup、そういう風に今回はよりmeetupらしくしようとドリンクタイムと全員LTから始めました。場所は秘密基地の雰囲気ただようHubTokyoラウンジスペース。</p>

<p> LTの順番もリストされたものではなくて、関連がありそうだったりその場の雰囲気だったりで手を上げ「じゃ次やりますー」と前に出て３分という短い時間で自分の考えや視点を中心に話します。役に立つ話である必要はないし、結論でさえ不要です。</p>

<p> 普段プライベートに持っている個人の考えや問いかけがパブリックになって、刺激を受けるというのは面白いです。</p>

<p> 土曜日らしいゆっくりした雰囲気で始まったmeetupは、セッションを時々挟みながら、しかしあくまでフリータイム中心に進みます。</p>

<h2>Resource Oriented X</h2>

<p> サプライズでLithiumのリードデベロッパーで来日中のnateさんが遊びに来てくれ、公演までして行ってくれました。BEAR.Sundayはリソース指向のフレームワークですが、このnateさんの公演内容はリソース指向のアプリケーション（with Lithium &amp; AunguraJS）です。</p>

<p> 最新技術の最新アプリケーションに圧倒されつつ、「リソース指向」のシンクロニシティにエキサイトしました。</p>

<h2>Arigato</h2>

<p>遠く大阪や岐阜から訪れてくれた人も「来たかいがあった」と満足して帰られたのではないでしょうか。Nateさんのサプライズもあったし会場も雰囲気も食事も全部良かった。良いmeetupになったと思ってます。緩く始まりドンドン濃くなっていって、最後にドーンとRichardさんとNateさんの花火のようなプレゼンテーションに達成感すら感じました。meetup最後の@haltさんのtweet「すごい密度で疲れたああああ！」..同意です。
小さな集まりですが、質の高い時間を共有できるように私たちスタッフは力を尽くしました。<a href="https://twitter.com/kuma_nana">@kuma_nana</a> <a href="https://twitter.com/zingooo">@zingooo</a> <a href="https://twitter.com/zukimochi">@zukimochi</a> ありがとうありがとう。 トークをしてくれた 神宮君、Richardさん、Nateさん、それにLT&amp;参加してくれた全ての人、スポンサード頂いた<a href="http://hubtokyo.com/">HubTokyo</a>、<a href="http://webster.jp/">Webster</a>、LT「Tech for Social Good 」の明石君にも感謝です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TEDxTokyo 2013]]></title>
    <link href="http://koriym.github.io/tedxtokyo2013"/>
    <updated>2013-05-13T00:00:00+09:00</updated>
    <id>http://koriym.github.io/tedxtokyo-2013</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/tedxtokyo2013">Tweet</a>
</div>


<h2>TED / TEDxとは?</h2>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/d0NHOpeczUU "></iframe></div>


<blockquote><p>TEDx（テデックス）は、TEDの精神である「広める価値のあるアイデア」を共有するために世界各地で生まれているコミュニティー。TEDxTokyo（テデックス・トーキョー）は、世界で2番目、米国以外では最初のTEDxとして、近年のTEDxムーブメントを先導してきました。</p></blockquote>

<p>5/11に<a href="http://www.tedxtokyo.com/">TEDxTokyo</a>に参加しました。</p>

<h2>今回の参加</h2>

<p>TEDは以前からのファンで日本語が用意されていない頃から見ていました。そのTEDの精神を持ったTEDxの参加への興味は自然の事でしたが直接のきっかけは、初期の頃からボランティアとして参加していた<a href="https://twitter.com/remore">@remore (沢田さん)</a><sup><a href="#footnote_0_1880" id="identifier_0_1880" class="footnote-link footnote-identifier-link" title="PHPのイベントphpmatsuriで知り合いました">1</a></sup> にTEDxTokyoの事や参加のためのプロセスを伺った事でした。</p>

<p>年7500ドル参加に別に2500ドルが必要な本家のTED<a href="http://www.ted.com/pages/tedconference">*</a>と違ってTEDxTokyoの参加に費用負担はありませんが、キュレーションが行われ参加には招待を受ける必要があります。締め切り間近の3/25にParticipant Application Formから申し込んで、幸運な事に直後に招待のメールを受け取ることができました。</p>

<p>「本家TEDと同じく、全セッションおよびセッション間のインタラクティブな休憩時間すべてに参加することを前提にデザインされています」という事でセッションの全てとイーブニングセッションに参加すると確認の返信をして参加が決定しました。</p>

<p>参加決定して助言も頂きました。</p>

<blockquote><p>説明するまでもないかもしれませんが、TEDxTokyoは単なるプレゼンテーションイベントでもNetworkingイベントでもなく、ある一つのコミュニティです。参加者もスピーカーも、ファウンダーも、ボランティアスタッフも、idea-centeredでinspiringな空間が生まれるようにイベントを設計していきます。どうか当日は話を聞くだけでなく、他の方とのアイデアの交換や会話も含めて楽しんできてください＾＾</p></blockquote>

<p>オーガナイザーのトッドさんやパトリックさんの話も知り、ますます盛り上がります。</p>

<p><a href="http://www.shibuyabunka.com/keyperson/?id=109">http://www.shibuyabunka.com/keyperson/?id=109<br/>
</a><br/>
<a href="http://www.1101.com/patrick/index.html">http://www.1101.com/patrick/index.html</a></p>

<h2>Discovery</h2>

<p>僕はよく旅行に出かけます。旅の楽しみは色々ありますが、自分にとって最大の楽しみは「発見」です。その発見の中でも、エキサイティングなのは背景や価値観の違う人達と同じ時間、同じ空間を共有、交流する事で得られる発見です。モノやコトを違う角度で見て、違う解釈をする、しかし同時代に生きる同じヒトとの交流で得られる発見です。</p>

<p>前日に再度 @remoreさんから再度アドバイスを受けます</p>

<blockquote class="twitter-tweet" width="550" lang="ja">

    @<a href="https://twitter.com/koriym">koriym</a> TEDxTokyoは1-day eventではなくてコミュニティ（eco system）なので（耳たこですね）、明日はもちろんこの先もアイデアを実現させるプラットフォームのように捉えて参加すると楽しめると思います！（長い

  

    &mdash; Kei Sawadaさん (@remore) <a href="https://twitter.com/remore/status/332876791486242816">2013年5月10日</a>

</blockquote>


<p>TEDxではどのような交流があって、どんな発見があるのか。初めての一人旅前日のような高揚感とワクワク感で当日を向かえました</p>

<h2>TEDx Talks</h2>

<p>当日は13時間の長丁場です。</p>

<blockquote><p>スケジュール<br/>
08:00 受付開始 （軽い朝食と交流会）<br/>
08:40 ご着席<br/>
09:00 セッション1<br/>
10:30 休憩<br/>
11:15 セッション2<br/>
12:45 ご昼食<br/>
14:15 セッション3<br/>
16:00 休憩<br/>
16:30 セッション4<br/>
18:30 ディナーレセプション「TEDxTokyo祭り」開始<br/>
21:30 ディナーレセプション「TEDxTokyo祭り」終了</p></blockquote>

<p>全てのセッションはオンラインで中継されました。現在はほとんど全てのトークやパフォーマンスを<a href="http://www.youtube.com/playlist?list=PLsRNoUx8w3rPedoKDdqaRxtoOsuNqNPWq">TEDxチャンネル</a>で視聴する事ができます。</p>

<p>中でも特に印象に残ったものを紹介します。</p>

<p><strong>愛あるデザインの為に: 田子 學</strong></p>

<p>自分のしてる事を常に問いかけ続ける姿勢に感銘しました。田子さんは最後にこう結びます。「シンプルに見返して、そして信念を見つける事、それを一つ一つ繋げて行く事」</p>

<p><strong>星に届いた夢: 大平 貴之</strong></p>

<p>メガスターは前からいつも一度見て見たいと思っていたのですが、制作者ご本人のユーモアに溢れたセッションを先に聞く事になりました。小さな頃の思いを抱き続けそれを形にして世に問い世界的な評価を手にした事はすごい事です。しかし本人の優しい語り口から、身近な話のように感じ自分自身の経験を重ねて聞いていました。</p>

<p><strong>クモの糸で変わる世界: 関山 和秀</strong></p>

<p>本当に驚きました。「初めはみんな不可能だと言いました」言うでしょう、言うと思います！しかしそれをやりとげ、自ら作った糸を右手で掲げ「私たちはそう思わない」&#8230;本当にかっこ良かったです。</p>

<p><strong>社会の役に立たない建築家: 坂 茂</strong></p>

<p>スピーカーの方が登場される前に、オーガナイザーであり進行であるパトリックさんがスピーカーの方を紹介するのですが、最も高揚して紹介されてると感じられたのが最後のスピーカーの坂さんでした。</p>

<p>&#8220;権力者の誇示のための建築ではなく、社会のための紙建築&#8221;の話です。世界的に高名な建築家<sup><a href="#footnote_1_1880" id="identifier_1_1880" class="footnote-link footnote-identifier-link" title="最近話題になった成蹊大学情報図書館のも坂さんの作品ですね">2</a></sup> が「社会の役に立たない建築家」と題し「地震が人々を殺してるんではないのです、地震によって倒壊した建物が人々を殺してる」のですと話します。自身の取り組みを静かな熱意とユーモアで紹介します。</p>

<p>ほかにも人間国宝の<a href="http://www.youtube.com/watch?v=tRsFL12DURw&amp;list=PLsRNoUx8w3rPedoKDdqaRxtoOsuNqNPWq">室瀬和美さんの漆の話</a>、<a href="http://www.youtube.com/watch?v=QIeSNitzd3k&amp;list=PLsRNoUx8w3rPedoKDdqaRxtoOsuNqNPWq">会田誠さんの&#8221;テキトー&#8221;</a>、<a href="http://www.youtube.com/watch?v=-40W_pnhlUs&amp;feature=share&amp;list=PLsRNoUx8w3rPedoKDdqaRxtoOsuNqNPWq">佐藤卓さんの「あ」モーメント</a>、発見のあるものばかりでした。</p>

<h2>TEDx パフォーマンス</h2>

<p><strong>江戸古典奇術『手妻』: 藤山 晃太郎</strong></p>

<p>パフォーマンスも全て素晴らしかったのですが、朝一番に出演した手妻師の藤山晃太郎さんの操る蝶が見事でした。江戸時代にマジシャンが居たなんて初めて知りました。それを知った事も良かったです。</p>

<p>YouTubeでは見る事ができませんが、舞踏家の<a href="http://www.kudo-taketeru.com">工藤丈輝</a>さんのパフォーマンスも強く心に残りました。</p>

<h1>1+1=11</h1>

<p>今回のテーマです。1+1=2は日常の世界、1+1=10はコンピューターの世界（二進数）、1+1=11は単純加算ができず、人(one)が並び合い、向かい合い化学反応を起こすTEDxの世界。今回のテーマをこのように解釈しました。</p>

<p>感銘を受けたスピーカーの方に共通してたのは、常に自身や自身の行ってる事に問いかけ続ける姿勢を持っている事でした。語り口は静かですが情熱を持ち、自分のなすべき事に真摯に対峙してる方々の話です。「信念を見つける事、それを一つ一つ繋げて行く事」それを実践している人の話です。「伝える価値のあるアイデア」の元にある「伝える価値のある経験」を共有できた事が素晴らしかった。</p>

<p>多くの方の思いと情熱で作られているTEDxTokyoに参加できて良かったです。</p>

<p>これを何かの形で繋げていかねばなりません。</p>

<p>「単なる1-day eventでは」&#8230; 一日が終わり、熱狂が良い感じで引いて来た頃に参加前に聞いた言葉を思い出しました。</p>

<p>% img <a href="http://placekitten.com/890/280">http://placekitten.com/890/280</a> %}</p>

<p><img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6216.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6210.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6188.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6198.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6184.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_6178.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/IMG_6167.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_6162.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_6158.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4073.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4076.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4071.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4066.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4064.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4061.jpg">
<img src="http://koriym.github.io/wp-content/uploads/2013/05/img_4060.jpg"></p>

<ol class="footnotes">
  <li id="footnote_0_1880" class="footnote">
    PHPのイベントphpmatsuriで知り合いました [<a href="#identifier_0_1880" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1880" class="footnote">
    最近話題になった成蹊大学情報図書館のも坂さんの作品ですね [<a href="#identifier_1_1880" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[timeアノテーション]]></title>
    <link href="http://koriym.github.io/2013/04/time_annotation/"/>
    <updated>2013-04-04T00:00:00+09:00</updated>
    <id>http://koriym.github.io/2013/04/time_annotation</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/2013/04/time%e3%82%a2%e3%83%8e%e3%83%86%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3/">Tweet</a>
</div>


<p>PHPメンターズのブログで<a href="http://phpmentors.jp/post/46982737824">時計オブジェクト（ドメインクロック）を導入してテスト容易性と意図性を高める</a>という記事が掲載されました。</p>

<p>この記事のように、現在時刻をアプリケーションでどう扱うかをBEAR.SundayのSandboxアプリケーションで見てみます。</p>

<h2>@Timeアノテーション</h2>

<p>現在時刻文字列を扱いたいクラスにはpublicのtimeプロパティを追加しメソッドに<strong>BEAR\Sunday\Annotation\Time</strong>アノテーションを注記（アノテート）します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">use</span> <span class="nx">BEAR\Sunday\Annotation\Time</span><span class="p">;</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Current time string</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @string</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="nv">$time</span><span class="p">;</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Time</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onPut</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$title</span><span class="p">,</span> <span class="nv">$body</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">time</span><span class="p">;</span> <span class="c1">// 2013-04-03 19:37:40</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>すると<strong>このメソッドがコールされたタイミングで</strong>timeプロパティに現在時刻が代入されるようになます。メソッド内ではそのプロパティを利用するだけです。</p>

<p>テストコードでは以下のようにpublicプロパティに値を代入します。<sup><a href="#footnote_0_1834" id="identifier_0_1834" class="footnote-link footnote-identifier-link" title="セッターメソッドを用意してもいいでしょう">1</a></sup> テストは容易に行う事ができます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'> <span class="nv">$user</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">User</span><span class="p">;</span>
</span><span class='line'> <span class="nv">$user</span><span class="o">-&gt;</span><span class="na">time</span> <span class="o">=</span> <span class="s2">&quot;2013-04-03 19:37:40&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DI ? AOP ?</h2>

<p>働きとしてはプロパティに依存が代入される<strong>プロパティ・インジェクション</strong>なのですが<sup><a href="#footnote_1_1834" id="identifier_1_1834" class="footnote-link footnote-identifier-link" title="Ray.Diではプロパティ・インジェクションをサポートしていません">2</a></sup> 、BEAR.SundayではこれをRay.Aopで行っています。メソッドに束縛されたインターセプターが現在時刻をインジェクション（外部から代入）しています。</p>

<h2>TimeStamper</h2>

<p>BEAR\Package\Module\Database\Dbal\DbalModuleモジュールでDoctrin DBALモジュールを利用するためにDIとAOPの設定を行っていますが、このモジュール内で@Timeとアノテートされたメソッドと現在時刻を代入するインターセプターが束縛されています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">bindInterceptor</span><span class="p">(</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span><span class="o">-&gt;</span><span class="na">any</span><span class="p">(),</span> <span class="c1">// どのクラスでも</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">matcher</span><span class="o">-&gt;</span><span class="na">annotatedWith</span><span class="p">(</span><span class="s1">&#39;BEAR\Sunday\Annotation\Time&#39;</span><span class="p">),</span> <span class="c1">//@Timeとアノテートされてるメソッドに</span>
</span><span class='line'>    <span class="p">[</span><span class="k">new</span> <span class="nx">TimeStamper</span><span class="p">]</span> <span class="c1">// TimeStamperを束縛</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>TimeStamperは元メソッドのtimeプロパティに現在時刻をセットするだけの単純なインターセプターです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">invoke</span><span class="p">(</span><span class="nx">MethodInvocation</span> <span class="nv">$invocation</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$object</span> <span class="o">=</span> <span class="nv">$invocation</span><span class="o">-&gt;</span><span class="na">getThis</span><span class="p">();</span> <span class="c1">// 元オブジェクト</span>
</span><span class='line'>    <span class="nv">$object</span><span class="o">-&gt;</span><span class="na">time</span> <span class="o">=</span> <span class="nb">date</span><span class="p">(</span><span class="s2">&quot;Y-m-d H:i:s&quot;</span><span class="p">,</span> <span class="nb">time</span><span class="p">());</span>  <span class="c1">// 現在時刻代入</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$invocation</span><span class="o">-&gt;</span><span class="na">proceed</span><span class="p">();</span> <span class="c1">// 元メソッド実行して返す</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>おわりに</h2>

<p>この記事では現在のSandboxアプリケーションで行っている現在時刻文字列を取り扱いましたがこれを\DateTimeにすれば<a href="http://phpmentors.jp/post/46982737824">時計オブジェクト（ドメインクロック）を導入してテスト容易性と意図性を高める</a>記事の中のドメインクロックと同じになると思います。</p>

<p>現在時刻を必要とするメソッドに@Timeと注記しその依存を利用する事でテスト容易性（testability）とコードの意図性（intentionality）が実現されています。</p>

<p>また時刻を用意するという関心を１つのメソッドに集約することでフォーマットの一括変更が可能になるのと同時に、その適用を任意に束縛して決定しているのでアプリケーションコンテキストやメソッド・クラス名に応じて変更する柔軟性も確保しています。</p>

<ol class="footnotes">
  <li id="footnote_0_1834" class="footnote">
    セッターメソッドを用意してもいいでしょう [<a href="#identifier_0_1834" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1834" class="footnote">
    Ray.Diではプロパティ・インジェクションをサポートしていません [<a href="#identifier_1_1834" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ray 1.0.0]]></title>
    <link href="http://koriym.github.io/2013/04/ray-1-0-0/"/>
    <updated>2013-04-01T00:00:00+09:00</updated>
    <id>http://koriym.github.io/2013/04/ray-1-0-0</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/2013/04/ray-1-0-0/">Tweet</a>
</div>


<h2>1.0.0</h2>

<p>Ray.Di / Ray.Aopのバージョン1.0.0をリリースしました。</p>

<p>これまでも何度か紹介しましたがRay.Diはオブジェクトとオブジェクトの関係の問題を解決するDIフレームワーク、Ray.Aopはアスペクト指向プログラミングフレームワークでGoogleのDIフレームワーク<a href="http://ja.wikipedia.org/wiki/Google_Guice">Guice</a>のPHPクローンです。</p>

<h2>first commit</h2>

<p>最初に作り始めたのはRay.Aopです。これが最初のコミットです。まだPHP5.4はなく、PHP5.3でコードしていました。<br/>
<a href="https://github.com/koriym/Ray.Aop/tree/2ab2dff8204622fdfaeae0bd608e88010b98b99f">https://github.com/koriym/Ray.Aop/tree/2ab2dff8204622fdfaeae0bd608e88010b98b99f</a></p>

<p>最初に作ろうとしたのはこういうものでした。</p>

<p>サービス（呼び出される方）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Mock</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getDouble</span><span class="p">(</span><span class="nv">$a</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$a</span> <span class="o">*</span> <span class="mi">2</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>コンシュマー（呼び出す方）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nv">$mock</span><span class="o">-&gt;</span><span class="na">getDouble</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//6</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>これらの呼び出しコード、呼ばれるメソッドを変更をすることなく</strong>帰ってくる値を本来の値の10倍(60)にしすることを考えます。実現するためにはメソッドの実行呼び出しコードと呼ばれるメソッドの間に、「10倍にする」という処理を差し込まなければなりません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">tenTimes</span> <span class="k">implements</span> <span class="nx">MethodInterceptor</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">invoke</span><span class="p">(</span><span class="nx">MethodInvocation</span> <span class="nv">$invocation</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$invocation</span><span class="o">-&gt;</span><span class="na">proceed</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$result</span> <span class="o">*</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>特定のメソッドをコールしたときのコールバックを設定する機能などがあれば簡単なのですが、そういう機能はありません。なのでオブジェクトを作成するときにその「横断的処理」を織り込んだオブジェクトを生成する必要があります。具体的には<strong>getDouble(2)</strong>でコールされたららその結果を10倍にする横断的処理が透過的に呼ばれるようなオブジェクトをつくります。</p>

<p>最初はどうやって記述したらよいかさっぱり分からなかったのですが、AOPアラインスのインターフェイスやメソッドリフレクション、マジックメソッドの組み合わせでなんとか（というよりもしかしたら）出来るのではと考えました。</p>

<p>最初のコミットでのコードはこういうものでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$mock</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Weaver</span><span class="p">(</span><span class="k">new</span> <span class="nx">Mock</span><span class="p">,</span> <span class="nv">$interceptors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>元のオブジェクト(new Mock)に「10倍に」という処理を横断的処理($interceptors)を織り込んたもの（Weaver）を元のオブジェクト同様に扱います</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">echo</span> <span class="nv">$mock</span><span class="o">-&gt;</span><span class="na">getDouble</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span> <span class="c1">//60</span>
</span></code></pre></td></tr></table></div></figure>


<p>できました！</p>

<p>オブジェクトに横断的処理を&#8221;織り込む&#8221;事により、呼び出し側も呼び出される側も無変更で振る舞いを変更することができました。webフレームワークの機能の多くはこれらの横断的処理です。呼ぶ側も呼ばれる側にも無変更で、動的に横断的処理を着脱できると事に大きな可能性を感じました。</p>

<h2>失敗</h2>

<p>最初のコミットのRay.Aop、これは大失敗というのがすぐに分かります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$mock</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Weaver</span><span class="p">(</span><span class="k">new</span> <span class="nx">Mock</span><span class="p">,</span> <span class="nv">$interceptors</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>このコードではメソッドの指定がなく、Mockが持つ全てのメソッドに「10倍」という横断的処理がくっついて（束縛されて）ました。数字以外を返すメソッドではそもそもエラーになります。これでは使い物になりません。</p>

<h2>可能性</h2>

<p>しかし同時に、この失敗でやっとAOPの本当の力に気がつくことができました。つまり無指定で全てのメソッドに横断的処理が束縛されるということは、指定した特定メソッドに同時に横断的処理を束縛できるということです。delete*で始まるメソッドには全てログを、admin/で始まるパスでは認証チェックを、などといった横断的処理の束縛がアプリケーション実行コンテキストによって指定条件を決めることができます。<sup><a href="#footnote_0_1800" id="identifier_0_1800" class="footnote-link footnote-identifier-link" title="現在BEAR.Sundayのsandoxアプリでは、&rdquo;テスト&rdquo;ではスタブデータを、&rdquo;開発&rdquo;では全てのin/outを記録するようになっています。">1</a></sup></p>

<h2>Ray.Di</h2>

<p>AOPがメソッドの呼び出しと呼ばれるメソッドとの関係を規定するものだとすれば、DIはオブエクトとオブジェクトの関係を規定するものです。BEAR.Saturdayの開発／運用経験を通じてオブジェクト間の関係性をオブジェクト自身が解決しないことの有用性は大きく認識してたので、DIフレームワークの導入というのは最優先事項でした。BEAR.SaturdayのDIで多いに参考にしてたのは<a href="http://solarphp.com/">Solar</a>だったのですが<sup><a href="#footnote_1_1800" id="identifier_1_1800" class="footnote-link footnote-identifier-link" title="他のPHPフレームワークではほとんどDIが使われていませんでした">2</a></sup> 今回最も良い設計/実装と思えたのはGoogleのDIフレームワーク<a href="http://ja.wikipedia.org/wiki/Google_Guice">Guice</a>でした。それを普通に移植するのではなく、Solarの後継のAura、そのAura.Diをforkして、拡張することにしました。</p>

<p>こんなものが移植できるのか<sup><a href="#footnote_2_1800" id="identifier_2_1800" class="footnote-link footnote-identifier-link" title="当時とても大きいものだと誤解してました">3</a></sup> 甚だ疑問で難しいのではないかと思ったのですが、AOPと共に機能するアノテーションベースで依存ポイントを指定し抽象と具象の接続指定でオブジェクトを構成するその設計と指向は、チャレンジに充分すぎるほどのものではないかと感じながら移植を開始しました。</p>

<p>実装、パフォーマンス、デバック等困難な事も多かったのですが、現在のBEAR.Sundayでかなりヘビーに使えていて今回1.0として長くつけてたbetaを外しました。これでcomposer.jsonで@devや@beta指定する必要がなくなります。</p>

<h2>Thx</h2>

<p><a href="https://github.com/madapaja">@madapaja</a> さん<a href="https://github.com/akkie"> @akkie</a> さんには有用なアドバイスをもらい、GitHubもPRもしてもらいました。特に@madapaja さんはブログ記事かいてもらったり、スライドで発表してもらったりしました。また<a href="https://github.com/jingu">@jingu</a>君にはRoboGuiceとの比較を教えてもらって、Guiceを使った事もない自分には大変助かりました。<a href="https://github.com/hidenorigoto">@hidenorigoto</a>さんにはWeb+DBで「たとえばSymfonyのDIコンポーネントと比較すると、DIの構成と利用の分離の点で一歩進んでます」との賛辞で紹介していただきました。<a href="https://github.com/vectorxenon">@vectorxenon</a>さんにはCakePHPでの利用してもらいました。</p>

<p>みなさん、ありがとうございます。これからもよろしくお願いします。</p>

<ol class="footnotes">
  <li id="footnote_0_1800" class="footnote">
    現在BEAR.Sundayのsandoxアプリでは、&#8221;テスト&#8221;ではスタブデータを、&#8221;開発&#8221;では全てのin/outを記録するようになっています。 [<a href="#identifier_0_1800" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1800" class="footnote">
    他のPHPフレームワークではほとんどDIが使われていませんでした [<a href="#identifier_1_1800" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_2_1800" class="footnote">
    当時とても大きいものだと誤解してました [<a href="#identifier_2_1800" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Be the first one]]></title>
    <link href="http://koriym.github.io/2013/03/be-the-first-one/"/>
    <updated>2013-03-29T00:00:00+09:00</updated>
    <id>http://koriym.github.io/2013/03/be-the-first-one</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/2013/03/be-the-first-one/">Tweet</a>
</div>




<iframe src="http://embed.ted.com/talks/lang/ja/derek_sivers_how_to_start_a_movement.html" width="560" height="315" frameborder="0" scrolling="no" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>&#8220;have the courage to follow and show others how to follow.&#8221;</p>

<div style="height:30px;">
</div>


<p>ソーシャルコーディングもそうではないかと考えました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BEAR.Sunday Quick Tour]]></title>
    <link href="http://koriym.github.io/bear-sunday-quick-tour"/>
    <updated>2013-03-04T00:00:00+09:00</updated>
    <id>http://koriym.github.io/bear-sunday-quick-tour</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/bear-sunday-quick-tour">Tweet</a>
</div>


<p>簡単にBEAR.Sundayを体験できるチュートリアルを用意しました。それぞれのセクションの目安の時間も記してみました。良かったら手を動かしてお付き合いください。</p>

<h2>準備</h2>

<p>PHP 5.4がインストールされていればOKです。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -v
</span><span class='line'>PHP 5.4.11 (cli) (built: Jan 27 2013 22:00:35)
</span><span class='line'>Copyright (c) 1997-2013 The PHP Group</span></code></pre></td></tr></table></div></figure>


<p>もしPHP5.4がインストールされてなくてもOSXならこれだけでインストールできます。<sup><a href="#footnote_0_1693" id="identifier_0_1693" class="footnote-link footnote-identifier-link" title="詳しくは php-osx.liip.ch を">1</a></sup></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://php-osx.liip.ch/install.sh | bash -s 5.4</span></code></pre></td></tr></table></div></figure>


<h2>BEAR.Sundayのインストール</h2>

<p><i class="icon-time"></i> 5-? min</p>

<p>コンソールでインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -s http://install.bear-project.net/ | sh -s ./bear</span></code></pre></td></tr></table></div></figure>


<p>または（curlが無い場合など）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ php -r "eval('?&gt;'.file_get_contents('https://getcomposer.org/installer'));"
</span><span class='line'>$ php composer.phar create-project -s dev --dev bear/package ./bear</span></code></pre></td></tr></table></div></figure>


<h2>アプリケーションの作成</h2>

<p><i class="icon-time"></i> 1 min</p>

<p>Helloアプリケーションを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd bear
</span><span class='line'>$ php bin/new_app.php Hello</span></code></pre></td></tr></table></div></figure>


<h2>コンソールでのアプリケーション実行</h2>

<p><i class="icon-time"></i> 3 min</p>

<p>web.phpを使いconsoleでHTMLの出力が確認できます。GETメソッドで/（ルート）をアクセスするには以下のようにタイプします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cd apps/Hello/public
</span><span class='line'>$ php web.php get /</span></code></pre></td></tr></table></div></figure>


<p>三番目の引き数でアプリケーションの実行コンテキスト（モード）を切り替える事ができます。</p>

<p>プロダクション</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php web.php get / prod</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">200</span> <span class="nx">OK</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;no-cache&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Mon, 04 Mar 2013 12:29:49 GMT&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="o">&lt;</span> <span class="o">!</span><span class="nx">DOCTYPE</span> <span class="nx">html</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">html</span> <span class="nx">lang</span><span class="o">=</span><span class="s2">&quot;ja&quot;</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;container&quot;</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="nx">Hello</span> <span class="nx">BEAR</span><span class="o">.</span><span class="nx">Sunday</span><span class="o">&lt;/</span><span class="nx">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">body</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">html</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>API</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php web.php get / api</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">200</span> <span class="nx">OK</span>
</span><span class='line'><span class="nx">content</span><span class="o">-</span><span class="nx">type</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;application\/hal+json; charset=UTF-8&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;no-cache&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Mon, 04 Mar 2013 12:31:17 GMT&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;greeting&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello BEAR.Sunday&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;_links&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="s2">&quot;self&quot;</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="s2">&quot;href&quot;</span><span class="o">:</span> <span class="s2">&quot;page://self/index&quot;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>利用できないメソッドには405(Method Not Allowed)が返って来ます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php web.php delete /</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="mi">405</span> <span class="nx">Method</span> <span class="k">Not</span> <span class="nx">Allowed</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">class</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;BEAR</span><span class="se">\\</span><span class="s2">Resource</span><span class="se">\\</span><span class="s2">Exception</span><span class="se">\\</span><span class="s2">MethodNotAllowed&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">message</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Hello</span><span class="se">\\</span><span class="s2">Resource</span><span class="se">\\</span><span class="s2">Page</span><span class="se">\\</span><span class="s2">Index::onDelete()&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">code</span><span class="o">-</span><span class="nb">file</span><span class="o">-</span><span class="nx">line</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;(405) \/Users\/akihito\/work\/bear\/vendor\/bear\/resource\/src\/BEAR\/Resource\/DevInvoker.php:59&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">previous</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;-&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">id</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;e500-b14ad&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">x</span><span class="o">-</span><span class="nx">exception</span><span class="o">-</span><span class="nx">id</span><span class="o">-</span><span class="nb">file</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;\/Users\/akihito\/work\/bear\/apps\/Hello\/data\/log\/e500-b14ad.log&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nx">cache</span><span class="o">-</span><span class="nx">control</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;no-cache&quot;</span><span class="p">]</span>
</span><span class='line'><span class="nb">date</span><span class="o">:</span> <span class="p">[</span><span class="s2">&quot;Mon, 04 Mar 2013 12:47:11 GMT&quot;</span><span class="p">]</span>
</span><span class='line'><span class="p">[</span><span class="nx">BODY</span><span class="p">]</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">requested</span> <span class="nx">method</span> <span class="nx">is</span> <span class="k">not</span> <span class="nx">allowed</span> <span class="k">for</span> <span class="k">this</span> <span class="nx">URI</span><span class="o">.</span>
</span><span class='line'><span class="nx">KumaAir</span><span class="o">:</span><span class="k">public</span> <span class="nx">akihito</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>404も試してみましょう。</p>

<h2>Webでのアプリケーション実行 (5 min)</h2>

<p>同じweb.phpを使ってBuilt-in Web serverを立ち上げます。ポート番号は自由です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>php -S localhost:8088 web.php</span></code></pre></td></tr></table></div></figure>


<p>挨拶が表示されました。devモードではツールバーと共に表示されます。<br/>
<a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/1582b4c4f63329511aff544dd1ebef7e.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/1582b4c4f63329511aff544dd1ebef7e.png" alt="スクリーンショット 2013-03-04 21.53.49" class="alignleft size-full wp-image-1705" /></a><br clear="all" /></p>

<p>この挨拶には<b class="button">page://self/index</b>という名前(URI)がついています。このURIのついた情報は「リソース」と呼ばれます。</p>

<p>灰色のバックグランドで表示されてるのはこのリソースはキャッシュを利用しないことを表します<sup><a href="#footnote_1_1693" id="identifier_1_1693" class="footnote-link footnote-identifier-link" title="緑/赤=Read/Write">2</a></sup> URIの隣にツールバーが並び、情報の確認やコードの編集ができるようになっています。破線はそのリソースの表示範囲を表します。</p>

<h2>オンライン編集</h2>

<p>リソースのコードとビューテンプレートはwebブラウザ上で編集することができます。<br/>
<a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/fcb9351e421ea4a9831bb99e3340bc67.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/fcb9351e421ea4a9831bb99e3340bc67.png" alt="スクリーンショット 2013-03-04 22.13.22" class="alignleft size-full wp-image-1714" /></a><br clear="all" /><br/>
保存にはショートカットキーも使えます。(⌘W / Ctl+W)</p>

<h2>シンタックスエラー</h2>

<p><i class="icon-time"></i> 2 min</p>

<p>ClassのCを誤って消してしまいました。シンタックスエラーになりますがエラーある状態でアプリケーションを実行するとエラーメッセージの表示されたエディターが表示されます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/9f9ffde325710fd6e898bf8086c17f37.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/9f9ffde325710fd6e898bf8086c17f37.png" alt="スクリーンショット 2013-03-04 22.27.37" class="alignleft size-full wp-image-1716" /></a><br clear="all" /><br/>
その場で修正して、「保存」「再読み込み」ですぐに復帰します。ケアレスミスによる思考の中断を最小限にします。</p>

<h2>クエリーを読む</h2>

<p><i class="icon-time"></i> 5 min</p>

<p>HTTPのGETメソッドではonGetメソッドがアクセスされます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">onGet</span><span class="p">(</span><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;BEAR.Sunday&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>このメソッドは</p>

<pre>$_GET</pre>


<p>と同様に機能します。$_GET[&lsquo;name&rsquo;]を$nameとして受け取っています。</p>

<pre>?name=YourName</pre>


<p>としてアクセスしてみたり、以下のようにyearクエリーも受け取ってみましょう</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onGet</span><span class="p">(</span><span class="nv">$name</span> <span class="o">=</span> <span class="s1">&#39;BEAR.Sunday&#39;</span><span class="p">,</span> <span class="nv">$year</span><span class="o">=</span><span class="mi">2013</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="p">[</span><span class="s1">&#39;greeting&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Hello &#39;</span> <span class="o">.</span> <span class="nv">$name</span> <span class="o">.</span> <span class="s2">&quot;, It&#39;s </span><span class="si">{</span><span class="nv">$year</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/271d16f1b59a267b7e7b571c9ee77c84.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/271d16f1b59a267b7e7b571c9ee77c84.png" alt="スクリーンショット 2013-03-04 22.43.18" class="alignleft size-full wp-image-1718" /></a><br clear="all" /></p>

<p><em>メソッドは<strong>$_GET</strong>クエリーと同じく名前で指定されるので（名前付き引き数＝named parameter)通常のPHPの引き数のように引き数の順番では変数名で指定されます。（順番は関係ありません）$_GETのクエリーは取得するのではなく、PHPのメソッドと融合して与えられている事にも注目してください。</em></p>

<h2>テンプレート</h2>

<p><i class="icon-time"></i> 1 min</p>

<p>リソースクラスファイルの拡張子をtplあるいはtwigに変えたものがそのリソースの表現に用いられるビューテンプレートになります。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/7aa52204264f594c4f4a7fdfb5fa4cca.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/7aa52204264f594c4f4a7fdfb5fa4cca.png" alt="スクリーンショット 2013-03-04 22.55.42" class="alignleft size-full wp-image-1723" /></a><br clear="all" /></p>

<h2>/dev/ツール</h2>

<p><i class="icon-time"></i> 3 min</p>

<p>URLに/dev/と入力するとデバックツールが表示されます</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/55d203fe83ff32fa33156f66650ac8e1.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/55d203fe83ff32fa33156f66650ac8e1.png" alt="スクリーンショット 2013-03-04 22.58.27" class="alignleft size-full wp-image-1724" /></a></p>

<h3>リソース一覧</h3>

<p>/dev/resource/ ではリソースを一覧したり新規のリソースをつくることができます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/03/e4249349b0ca4c6ad94182c21b6b6c69.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/03/e4249349b0ca4c6ad94182c21b6b6c69.png" alt="スクリーンショット 2013-03-04 22.59.31" class="alignleft size-full wp-image-1725" /></a><br clear="all" /></p>

<p>つくったばかりのHelloアプリケーションは<strong>page://self/index</strong>というページリソースが１つ。利用可能なメソッドはGETだけという事が分かります。リソース（モデル）は、アプリケーションの核心です。アプリケーション管理者はそのアプリケーションにいくつ、どんなリソースがあるかをこのリソース画面で知る事ができます。</p>

<h2>What&#8217;s next ?</h2>

<p><i class="icon-time"></i> 1 week</p>

<p><a href="http://www.bear-project.net/blog/WEB-DB-PRESS-Vol73">Web+DB Press記事</a>のリソースを作ってみるのはどうでしょうか。<a href="https://code.google.com/p/bearsunday/wiki/my_first_index">&#8220;はじめて&#8221;シリーズ</a>はソフトウエアやインターネット技術の概念を同時に学ぶ事ができます。<a href="https://code.google.com/p/bearsunday/wiki/blog">ブログチュートリアル</a>は既存のFWとの実装の比較になります。<a href="https://github.com/koriym/BEAR.Package/tree/develop/apps/Sandbox">apps/Sandboxアプリケーション</a>はDB/ページングなど実用的なサンプルも含みます。特にRESTに興味のある方は定番となってる<a href="http://www.infoq.com/articles/webber-rest-workflow">REST Bucks</a>をBEAR.Sundayで実装した<a href="https://github.com/koriym/BEAR.Package/blob/develop/apps/Sandbox/Resource/Page/Restbucks/Index.php">HATEOAS実装</a>もあります。</p>

<ol class="footnotes">
  <li id="footnote_0_1693" class="footnote">
    詳しくは php-osx.liip.ch を [<a href="#identifier_0_1693" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1693" class="footnote">
    緑/赤=Read/Write [<a href="#identifier_1_1693" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WEB+DB PRESS Vol.73]]></title>
    <link href="http://koriym.github.io/WEB-DB-PRESS-Vol73"/>
    <updated>2013-02-24T00:00:00+09:00</updated>
    <id>http://koriym.github.io/on-webdb-press-vol-73</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/WEB-DB-PRESS-Vol73">Tweet</a>
</div>


<h2>BEAR.SundayでRESTfulなシステム開発</h2>

<p>WEB+DB PRESSの大人気連載「巨人の肩からPHP 先人たちに学ぶモダンプログラミング」の連載５回目にBEAR.Sundayをとりあげて頂きました。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/734505566.jpg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/734505566.jpg" alt="734505566" class="aligncenter size-full wp-image-1676" /></a>
RESTやRESTとBEAR.Sundayの関わりに触れてから、実際のリソースやリソース実装がどのようなコードになるかを紹介してもらっています。限られたページの中でよくまとまっていると思います。執筆編集の方々、ありがとうございます。</p>

<p>サンプルを雑誌に掲載されているようにSandboxアプリケーションでお試ししてもらっても全然問題ないのですが、雑誌掲載後にアプリケーションのスケルトンコードをcomposer create-projectで作成する機能がつきました。apps/ディレクトリで以下のようにアプリケーションディレクトリ名を指定してインストールします。</p>

<p><code>php composer.phar create-project -s dev --dev bear/skeleton ./MyApp</code></p>

<p>MyAppはアプリケーション名です。インストール直後にcomposerのpost-install-scriptが実行され「フォルダ名として指定したアプリケーション名」がコード中のnamespaceなどにも適用されます。アプリケーション固有のコマンド群を持つ代わりに汎用のcomposer create-projectを使用しています。</p>

<p>スクリーンキャストも用意しました。ご覧ください。</p>

<p>BEAR.Sundayの総合パッケージであるBEAR.PackageのインストールしてからMyAppというアプリケーションを作成してます。作成した後にコンソールでHTMLの確認、built in web serverでそのwebサイトを確認しています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PHP ソフトウェアメトリック]]></title>
    <link href="http://koriym.github.io/php-software-metric"/>
    <updated>2013-02-06T00:00:00+09:00</updated>
    <id>http://koriym.github.io/php-%e3%82%bd%e3%83%95%e3%83%88%e3%82%a6%e3%82%a7%e3%82%a2%e3%83%a1%e3%83%88%e3%83%aa%e3%83%83%e3%82%af</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/php-software-metric">Tweet</a>
</div>


<h2>ソフトウェアメトリック</h2>

<blockquote><p>ソフトウェア測定法（ソフトウェアそくていほう）またはソフトウェアメトリック（英: Software metric ）とは、ソフトウェアやその仕様の属性の尺度である。<br/>
定量的手法の威力は他の分野で証明されていたことから、計算機科学の分野でも同様の手法をソフトウェア開発に持ち込もうとする努力が続けられてきた。Tom DeMarco は「測定できないものは制御できない」と記している。</p>

<p>&#8212; <a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E6%B8%AC%E5%AE%9A%E6%B3%95">Wikipedia ソフトウエア測定法</a></p></blockquote>

<p>ソフトウェア工学の祖の一人であるトム・デマルコは名著『品質と生産性を重視したソフトウェア開発プロジェクト技法』をこの有名な一文「<strong>測定できないものは制御できない</strong>」で始めました。1987年のことです。</p>

<h2>phpdepend</h2>

<p>ソフトウエア品質を客観的・機械的に計ろうとするPHPのメトリクスツールにphpdependがあります。<br/>
<a href="http://pdepend.org/">http://pdepend.org/</a></p>

<p>本体の紹介の中でこのように述べてます。</p>

<blockquote><p>PHP_Depend can be used in an automated build environment and the generated reports are always objective, it just measures the quality facts of a given source base.</p>

<p>PHP_Depend scales with growing source bases, where human code reviews will fail at some day.</p>

<p>PHP_Depend allows you to indentify suspect parts in a software system that should be part of a code review, without looking into the source.</p>

<p>PHP_Depend also supports some fancy metrics that will become very useful, when you have reached certain level of metrics knowledge.</p></blockquote>

<p>このツールを使いソースコードを解析すると２つの画像(svg)ファイルが得られます<strong>。Abstraction Instability Chart</strong>と<strong>Overview Pyramid</strong>の２つです。</p>

<h2>Abstraction Instability Chart</h2>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/report-a-i-chart.png" alt="report-a-i-chart" class="aligncenter size-full wp-image-1607" />
Abstraction Instability Chartは横軸にA &#8211; abstraction（抽象化）、縦軸に I &#8211; Instabilityのグラフです。このAを理解するためにまず二つの数字を理解する必要があります。CaとCeです。</p>

<p><strong>Ca &#8211; Afferent Couplings:</strong><br/>
このパッケージに依存した他のパッケージがいくつあるかという数字です。高い数値は仕様変更が他に影響を与えるパッケージが多いということを表します。</p>

<p><strong>Ce &#8211; Efferent Couplings:</strong><br/>
このパッケージが依存するパッケージはいくつあるかという数字です。高い数値は他のパッケージの影響を受けやすいということを表します。</p>

<p><img style="display:block;" src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CaCeIllustration.jpg" alt="CaCeIllustration" class="aligncenter size-full wp-image-1595" />
この２つの数字を使って次のIが求められます。</p>

<p><strong>I -Instability </strong> &#8211; パッケージの不安定性を表します。Iは0～1をとり値が大きいほど不安定なパッケージとされ、この数値は(Ce / (Ce + Ca)) として求められます。</p>

<p>横軸のAは抽象度を表します。</p>

<p><strong>A &#8211; Abstractness</strong> = 抽象象クラス数(AC) / 具象クラス(CC) + 抽象クラス数(AC)</p>

<h3>Main Sequence</h3>

<p>グラフに(0,1)と(1,0)を結ぶ直線をひきます。これがMain Sequenceと言われるラインでAとIのバランスの理想的な関係を表します。この線からの距離が大きいと「抽象度が高いがあまり利用されていない」「抽象度が低いが他からの依存が強い」など「抽象度と依存度の関係」が不適切という事を表します。</p>

<p>そのパッケージのサイズが丸の大きさで表されるので、重要なパッケージに注目することができます。</p>

<h2>各フレームワークのA/Iチャート</h2>

<p>実際に取ってみました。ソースは<a href="https://github.com/koriym/php-framework-metric">https://github.com/koriym/php-framework-metric</a>です。※画像はSVGファイルなので単独で表示させ拡大するとパッケージ名の文字も読めます。</p>

<h3>symfony</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/symfony-jdepend.svg" alt="symfony-jdepend" class="aligncenter size-full wp-image-1633" /></p>

<h3>zf2</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/zf2-jdepend.svg" alt="zf2-jdepend" class="aligncenter size-full wp-image-1637" /></p>

<h3>cakephp</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/cakephp-jdepend.svg" alt="cakephp-jdepend" class="aligncenter size-full" /></p>

<h3>CodeIgniter</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CodeIgniter-jdepend.svg" alt="CodeIgniter-jdepend" class="aligncenter size-full wp-image-1625" /></p>

<h3>fuel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/fuel-jdepend.svg" alt="fuel-jdepend" class="aligncenter size-full wp-image-1627" /></p>

<h3>laravel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/laravel-jdepend.svg" alt="laravel-jdepend" class="aligncenter size-full wp-image-1629" /></p>

<h3>Slim</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Slim-jdepend.svg" alt="Slim-jdepend" class="aligncenter size-full wp-image-1631" /></p>

<h3>yii</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/yii-jdepend.svg" alt="yii-jdepend" class="aligncenter size-full wp-image-1635" /></p>

<h3>Silex</h3>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-jdepend.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-jdepend.svg" alt="Silex-jdepend" class="aligncenter size-full wp-image-1644" /></a></p>

<h3>BEAR.Sunday</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-jdepend.svg" alt="bear-jdepend" class="aligncenter size-full wp-image-1621" /></p>

<h2>Overview Pyramid</h2>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg" alt="bear-pyramid" class="aligncenter size-full wp-image-1622" /></a><br/>
この&#8221;ピラミッッド図&#8221;の見方ですが、まず３つの部分に分かれてる事を理解します。</p>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-0.serendipityThumb.png" alt="logger.overview-pyramid-0.serendipityThumb" class="aligncenter size-full wp-image-1610" />
次にNOPやCALLなどまるでアセンブラのニーモニックのような謎の略語を理解します。</p>

<p>Size and Complexity（サイズと複雑度）</p>

<p><strong>NOP</strong> パッケージの数<br/>
<strong>NOC</strong> クラスの数<br/>
<strong>NOM</strong> メソッドの数<br/>
<strong>LOC</strong> コードの行数</p>

<p>Coupling（結合度）</p>

<p><strong>CYCLO</strong> <a href="http://ja.wikipedia.org/wiki/%E5%BE%AA%E7%92%B0%E7%9A%84%E8%A4%87%E9%9B%91%E5%BA%A6">循環的複雑度</a><br/>
<strong>CALL</strong> メソッドあたりの呼び出し数<br/>
<strong>FOUT</strong> ファン・アウト (ある特定のメソッドが呼び出す他のメソッドの数)</p>

<p>Inheritance（継承）</p>

<p><strong>ANDC</strong> 直接の子孫の平均数<br/>
<strong>AHH</strong> 継承ツリーの平均の深さ</p>

<p>それらの値がピラミッドの中央に表示され、上段／下段の割合の数字が端に表示されます。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-31.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/logger.overview-pyramid-31.png" alt="logger.overview-pyramid-3" class="aligncenter size-full wp-image-1651" /></a>
数字には色が付けられ基準となる値の範囲に入ってない事を知らせてくれます。<br/>
これも同様に各フレームワークのチャートを用意しました。</p>

<h3>Symfony</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/symfony-pyramid.svg" alt="symfony-pyramid" class="aligncenter size-full wp-image-1634" /></p>

<h3>zf2</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/zf2-pyramid.svg" alt="zf2-pyramid" class="aligncenter size-full wp-image-1638" /></p>

<h3>cakephp</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/cakephp-pyramid.svg" alt="cakephp-pyramid" class="aligncenter size-full wp-image-1624" /></p>

<h3>CodeIgniter</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/CodeIgniter-pyramid.svg" alt="CodeIgniter-pyramid" class="aligncenter size-full wp-image-1626" /></p>

<h3>fuel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/fuel-pyramid.svg" alt="fuel-pyramid" class="aligncenter size-full wp-image-1628" /></p>

<h3>Silex</h3>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-pyramid.svg"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Silex-pyramid.svg" alt="Silex-pyramid" class="aligncenter size-full wp-image-1645" /></a></p>

<h3>laravel</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/laravel-pyramid.svg" alt="laravel-pyramid" class="aligncenter size-full wp-image-1630" /></p>

<h3>Yii</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/yii-pyramid.svg" alt="yii-pyramid" class="aligncenter size-full wp-image-1636" /></p>

<h3>Slim</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/Slim-pyramid.svg" alt="Slim-pyramid" class="aligncenter size-full wp-image-1632" /></p>

<h3>BEAR.Sunday</h3>

<p><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/02/bear-pyramid1.svg" alt="bear-pyramid" class="aligncenter size-full wp-image-1622" /></p>

<h2>ソフトウエア品質はツールによって測定できるか</h2>

<p>これには様々な議論があることも紹介します。この議論もとても興味深いものです。</p>

<ul>
<li><a href="http://blogs.itmedia.co.jp/hiranabe/2009/07/---by-tom-demar.html">「測定できないものは制御できない｣は誤りだった。&#8211; by Tom Demarco<br/>
</a></li>
<li>　<a href="http://d.hatena.ne.jp/january/20090720/1248076466">「測定できないものは制御できない｣は誤り？</a></li>
</ul>


<p>今回各フレームワークのチャート図を作ってみました。それぞれのフレームワークの傾向が出て面白いとも思うのですが<sup><a href="#footnote_0_1586" id="identifier_0_1586" class="footnote-link footnote-identifier-link" title="特にsymfony/zf2/cakephpのLOCが圧巻です">1</a></sup>、特に自分や自分のチームの開発しているソフトウエアに適用してその傾向や特徴を探る事も大事かと思います。ミニマムブートストラップを探る<a href="http://www.bear-project.net/blog/2011/08/php-hello-world%E3%82%B3%E3%83%BC%E3%83%AB%E3%82%B0%E3%83%A9%E3%83%952011/">HelloWorldベンチマーク</a>と同様です。</p>

<p>参考URL</p>

<ul>
<li><a href="http://www.ibm.com/developerworks/jp/java/library/j-eaed6/index.html">http://www.ibm.com/developerworks/jp/java/library/j-eaed6/index.html<br/>
</a></li>
<li><a href="http://manuel-pichler.de/archives/31-Using-the-Overview-Pyramid.html">http://manuel-pichler.de/archives/31-Using-the-Overview-Pyramid.html</a></li>
</ul>


<ol class="footnotes">
  <li id="footnote_0_1586" class="footnote">
    特にsymfony/zf2/cakephpのLOCが圧巻です [<a href="#identifier_0_1586" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BEAR.Sunday 0.6.0]]></title>
    <link href="http://koriym.github.io/BEARSunday0.6.0"/>
    <updated>2013-01-27T00:00:00+09:00</updated>
    <id>http://koriym.github.io/bear-sunday-0-6-0</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/BEARSunday0.6.0">Tweet</a>
</div>


<p>BEAR.Sunday 0.6.0をリリースしました。</p>

<h2>インストールが簡単に</h2>

<p><code>
$ curl -s https://getcomposer.org/installer | php
$ php composer.phar create-project -s dev --dev bear/package bear
</code></p>

<p>従来git cloneした後にcomposer installしてたインストールを<strong>composer.phar create-project</strong>に対応してインストールをより簡単にしました。これで&#8221;./bear&#8221;フォルダにBEAR.Packageがインストールされます。-s dev &#8211;devと似たようなオプションが並びますが前の&#8221;dev&#8221;はstability、後者の&#8221;dev&#8221;はcomposer.jsonで指定する&#8221;require-dev&#8221;パッケージ依存をインストールするという意味です。composer scriptにも対応し、インストール後にディレクトリの書き込み権限も設定します。</p>

<h2>フレームワークの拡張を明確に</h2>

<p><a href="http://www.bear-project.net/blog/2012/05/dip%EF%BC%9Adependency-inversion-principle/">DIP（依存関係逆転）原則</a>に忠実なBEAR.Sundayではフレームワーク機能の拡張性や変更に関して最大限の自由がありますが、それらを機能単位で明確にするためにExtentionインターフェイス／フォルダという仕組みを導入しました。</p>

<p>BEAR.SundayのExtensionフォルダ下にはフレームワークが提供する機能のインターフェイスが格納されています。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/01/8ab81e13c40d193b0412d41a774dc80d.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/01/8ab81e13c40d193b0412d41a774dc80d.png" alt="スクリーンショット 2013-01-26 22.14.05" class="alignleft size-full wp-image-1549" /></a></p>

<br clear="all" />  


<p>このインターフェイスを実装したものがBEAR.PackageのProvideフォルダです。</p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/01/c542f470d9282c6051929d816d3db704.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/01/c542f470d9282c6051929d816d3db704.png" alt="スクリーンショット 2013-01-26 22.15.58" class="alignleft size-full wp-image-1551" /></a></p>

<br clear="all" />


<p>対応するProvideフォルダのクラスではExtensionで指定されたインターフェイスの実装をします。この実装を利用するためには用意されているモジュールをインストールします。</p>

<p>例えば現在TemplateEngineに用意されているのはデフォルトでSmartyですがAppModule.phpでTwigModuleをインストールしてTwigを利用する事ができます。<sup><a href="#footnote_0_1548" id="identifier_0_1548" class="footnote-link footnote-identifier-link" title="このTwigモジュール実装はまだ実験的なものです。">1</a></sup></p>

<p><a href="http://www.bear-project.net/blog/wp-content/uploads/2013/01/8dfd092d9c9a7e1e78976caf8500b985.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2013/01/8dfd092d9c9a7e1e78976caf8500b985.png" alt="スクリーンショット 2013-01-26 22.21.05" class="alignleft size-full wp-image-1552" /></a></p>

<h2>PSR compliance</h2>

<p>これまでもPSR0/1/2の対応は行って来ましたが、PSR3のログインターフェイスに合わせてインターフェイスsuffixの議論があってそれに習いこれまでの「単数のメソッドのインターフェイスは&#8211;able系で複数のメソッドのものは&#8221;Interface&#8221; suffixにする」をすべて&#8221;Interface&#8221; suffixに変更しました。</p>

<p>これは初期のzf2のコード規約に習ったものだったのですが、zf2自身も方針を変更しています。またTraitも原則&#8221;Trait&#8221; suffixにし、パッケージのベースの例外インターフェイスも</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">Exception</span>
</span></code></pre></td></tr></table></div></figure>


<p>から</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">interface</span> <span class="nx">ExceptionInterface</span>
</span></code></pre></td></tr></table></div></figure>


<p>に変更しました。これもzf2と同じです。</p>

<p>例外は&#8221;Inject&#8221;suffixのついたインジェクト用のセッターメソッドTraitで、これは従来通り&#8221;Inject&#8221;suffixを使用します。</p>

<h2>1.0に向けて</h2>

<p>今回の変更は大掛かりなBCブレイクを伴う最期の変更にしたいと思っています。調整を経て1.0に繋げれる予定です。</p>

<h2>Meetup #1</h2>

<p>2/16にBEAR.Sundayのmeetup #1を予定しています。これは現在マニュアルの英訳をしてもらってるリチャードさん<a href="https://twitter.com/mackstar">@mackstar</a>の来日に合わせて行うものです。</p>

<p><strong>BEAR.Sunday meetup #1</strong><br/>
<a href="http://www.zusaar.com/event/505010" title="BEAR.Sunday meetup#1">http://www.zusaar.com/event/505010</a></p>

<p>今回も技術的にエキサイティングで楽しいものになればと思っています。<br/>
BEAR.Sunday meetup#1でお会いしましょう！</p>

<p>&#8211;</p>

<ol class="footnotes">
  <li id="footnote_0_1548" class="footnote">
    このTwigモジュール実装はまだ実験的なものです。 [<a href="#identifier_0_1548" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 12: debug print]]></title>
    <link href="http://koriym.github.io/adv12"/>
    <updated>2012-12-18T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-12-debug-print</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv12">Tweet</a>
</div>


<h2>デバック表示 p($var);</h2>

<p>BEAR.Sundayは前バージョンからの伝統(?)のデバック出力<strong>p();</strong>があります。<br/>
表示はxdebugのvar_dump()と同じですが加えて、変数名とp()した場所が表示されます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">p</span><span class="p">(</span><span class="nv">$a</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>webでp()すると</strong><br/>
<a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-17-23-31-50/" rel="attachment wp-att-1505"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/a0f4eafe84c70f36f0bb364cfbac6e9f.png" alt="スクリーンショット 2012-12-17 23.31.50" class="aligncenter size-full wp-image-1505" /></a></p>

<p><strong>コンソールでp()すると</strong></p>

<div>
</div>


<p><a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-17-23-34-23/" rel="attachment wp-att-1507"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/35ee0b02f38504093b38b4eea755e8f3.png" alt="スクリーンショット 2012-12-17 23.34.23" class="aligncenter size-full wp-image-1507" /></a> <div>
</div></p>

<p>引き数なしでp()すると(void)と表示されます。</p>

<p><a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-18-0-26-19/" rel="attachment wp-att-1510"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/a6c3d84bee8a4d686cbadd8e643d9f43.png" alt="スクリーンショット 2012-12-18 0.26.19" class="aligncenter size-full wp-image-1510" /></a><br/>
その場所を通ったかどうかの確認になります。</p>

<p>表示されたファイル名はクリックしてweb上で編集できデバック表示したp()を消したり表示内容を変更したりできます。<br/>
<a href="http://www.bear-project.net/blog/adv12/%e3%82%b9%e3%82%af%e3%83%aa%e3%83%bc%e3%83%b3%e3%82%b7%e3%83%a7%e3%83%83%e3%83%88-2012-12-18-0-35-26/" rel="attachment wp-att-1522">
  </a><a href="http://www.bear-project.net/blog/wp-content/uploads/2012/12/6cc52f92b203a81ef57231115a153620.png"><img src="http://www.bear-project.net/blog/wp-content/uploads/2012/12/6cc52f92b203a81ef57231115a153620.png" alt="スクリーンショット 2012-12-18 0.37.16" class="aligncenter size-full wp-image-1533" /></a></p>

<h2>
  デバック表示
</h2>


<p>  「変数内容を画面上で確認」IDE+Debuggerでもっと洗練された内容確認の仕方やTDDを実践したあとでも、この原始的なやり方を手放す事ができません。</p>

<p>  一方、デバック情報を画面に表示するときの問題「どれがどの表示を表してるのか分からなくなった」「どこでかいたのか分からない」「エディタに戻ってまた消すのが面倒」&#8230;それらの解決とコーディング作業の中断を0.1秒単位で削りたいという考えからこのp()を作りました。</p>

<p>  前回バージョンのSaturdayで好まれた機能です。Sundayでは表示変更とコンソール表示のサポートを追加しました。その他は以前のものと編集できたところも含めて同じです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 11: DI: Why not ?]]></title>
    <link href="http://koriym.github.io/adv11"/>
    <updated>2012-12-13T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-11-diwhy-not</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv11">Tweet</a>
</div>


<h2>ミッション</h2>

<p>BEAR.Sundayは非常に現実的なミッションがあって、スキルが多様なチームで最大限のパフォーマンス（制作、運用）を出す事が求められます。難しい要求なのですが、これはゴールであって前提でもあります。</p>

<p>もっと平たく言うと、スキルの高い人だけが使える”難しい”ものにできません。<br/>
またどんな奇麗な設計でも実運用でパフォーマンスが出ないと導入できません。</p>

<p>このミッションとDIがどのように関係してるのかを考察します。</p>

<h2>何故DIを使わないか？</h2>

<p>DIの利点や理解を促進する記事は多いですが、ここではまず何故DIを使わないかを考察してみます。その理由を解決すれば良いと単純に考えてみます。</p>

<h2>問題：面倒、難しい</h2>

<p>「面倒」と「難しい」は全く違う問題なのですが、これを一緒に解決します。つまり前回までの記事で「生成」と「利用」に分離されたDIのパターンでは面倒＆難しいという問題はほぼ全て「生成」、つまりコンパイルに集中しています。コードや実行時間だけでなく、まず作成者を区別することを考えてみます。</p>

<h3>アプリケーション・アーキテクト</h3>

<p>ライブラリを選択し、抽象と束縛し、必要なアダプターを記述します。これらはよりスキルのいる仕事でもありますがより再利用性の高い仕事でもあります。ここをアプリケーションアーキテクトが担当します。あるいはアプリケーションを横断するパッケージ、そのまたさらにBEAR.Sundayフレームワーク開発者<sup><a href="#footnote_0_1465" id="identifier_0_1465" class="footnote-link footnote-identifier-link" title="つまり自分なのですが">1</a></sup>が担当します。アプリケーションを記述するアプリケーションエンジニアは基本は用意されたパッケージを利用する事に集中し、コンパイルタイムで行われる仕事は原則しません。</p>

<p>つまり現在のBEAR.PackageであればSQLを記述し、テンプレートを用意し、用意されたサービスオブジェクトとアノテーションに束縛された@Cacheアドバイスなどを利用しアプリケーションを記述します。特定ドメインにフォーカスしてビジネスロジックとその表現に関わることにコーディングを集中させます。</p>

<h3>易しい依存の利用</h3>

<p>一旦アプリケーション・アーキテクトがまとめ上げた制約は再利用が可能です。BEAR.SundayのDIはオブジェクトを利用するのに最低限の記述しか必要としません。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// トレイトで</span>
</span><span class='line'><span class="k">use</span> <span class="nx">LogInject</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">TmpDirInject</span><span class="p">;</span>
</span><span class='line'><span class="c1">// メソッドで</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * @Inject</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">setLog</span><span class="p">(</span><span class="nx">LogInterface</span> <span class="nv">$log</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">log</span> <span class="o">=</span> <span class="nv">$log</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>特定の抽象に束縛済みの依存があるなら再利用可能です。同じ依存がある新しいクラスを書くときにコンパイルに関わる記述の必要はありません。use文か、インターフェイスに@Injectアノテーションを打つと依存を受け取ることができます。</p>

<p>依存を利用するだけなら、特定のDependency Injector機構やその設定ファイルのフォーマットを理解する必要はありません。利用コードだけで依存を受け取れます。</p>

<h3>仕事の80%はメンテナンス</h3>

<p>三ヶ月で開発されたサービスが数年単位でメンテナンスされます。担当は代わり、プログラマーは内部外部問わず交代します。そしてメンテナンスの仕事の多くは生成ではなく、利用コードの変更です。</p>

<p>全ての仕事を一人で担当する場合でも、再利用性の高いコンパイルに関連するコードと利用コードが分かれている事はメリットになります。ずっと手を入れてない（忘れてる）コードを触る時でもまずは利用コードの理解だけに集中できます。</p>

<h2>問題：パフォーマンス</h2>

<p>オブジェクトグラフの再利用する設計でパフォーマンス上の問題はあまりありません。逆により高いパフォーマンスが望める場合が多いと思います。</p>

<h2>どうでしょうか？</h2>

<p>話をフェアにするためにBEAR.SundayのDIがうまく解決できない問題も述べます。アノテーションベースのDIシステムに共通の問題なのですが、「<a href="http://code.google.com/p/google-guice/wiki/FrequentlyAskedQuestions">ロボットの足問題</a>」と呼ばれる問題があります。これは同じような依存の少しだけ違う依存をどうやって束縛するかという問題で解決できるのはできるのですが、記述は冗長です。もっとうまい解決があるべきだと考えます。<sup><a href="#footnote_1_1465" id="identifier_1_1465" class="footnote-link footnote-identifier-link" title="問題は表面化してません。">2</a></sup></p>

<p>「難しい、面倒、遅い」これらのそれなりの解答になってるでしょうか。また他にどういう問題があるでしょうか？あれば解決法を考えましょう。dependentがクリーンなDIは、インジェクトの仕組みをより良いものに丸ごとアップデートできる可能性があります。</p>

<p>アノテーションベースのRay.Diの現在のBEAR.Sundayクラスも設定ファイルベースのAura.Diに変更することは原理的に可能です。depedentに注入機構の依存がないためです。</p>

<ol class="footnotes">
  <li id="footnote_0_1465" class="footnote">
    つまり自分なのですが [<a href="#identifier_0_1465" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
  <li id="footnote_1_1465" class="footnote">
    問題は表面化してません。 [<a href="#identifier_1_1465" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 10: DI > SL ?]]></title>
    <link href="http://koriym.github.io/adv10"/>
    <updated>2012-12-13T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-10-di-sl</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv10">Tweet</a>
</div>


<h2>依存するから？</h2>

<p>また違った面からDIを考察してみます。SLとの比較です。<br/>
SLをアンチパターンとするときに良く言われるのが、「コンテナに依存するから」と説明されますがこれを考えてみます。</p>

<p>依存した事自体が問題なのでしょうか？（0 dependencyでなくなった)<br/>
それとも依存しているコンテナの性質に依存している問題なのでしょうか？</p>

<h2>new, SL and DI</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Conventional</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Foo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Di</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">FooInterfeace</span> <span class="nv">$foo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="nv">$foo</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Sl</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="nx">Container</span> <span class="nv">$container</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">foo</span> <span class="o">=</span> <span class="nv">$container</span><span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>オブジェクトを取得する３つのコードです。</p>

<p>Conventionalクラスではnewで生成して取得しています。依存はハードコードされていて$fooはFooのインスタンスです。</p>

<p>Diではインターフェイスを通じて依存を受け取っています。DIP原則に従って抽象に依存しています。$fooはFooInterfaceを実装した何かのクラスです。</p>

<p>Slでは&#8221;foo&#8221;というサービスオブジェクトを取得しています。ロケーターはこのクラスに記述してあった依存を隠してしまいました。このfooサービスはどういうもので何でしょうか？どうすれば分かるでしょうか？これを知るAPIはありません。コンテナ機構を理解して、コンテナにセットしているコードを見て、あるいは設定ファイルから？ドキュメントから？</p>

<p>これをうまく説明するには前の２つの方法に比べて、何かの規約や機構が必要です。人が容易に理解できるようになってもコードはこれを検出しません。IDE等でコード補完を受けるためには注釈が必要でしょう。</p>

<p>またこのクラスはコンテナに依存するようになったことで、独立したパッケージとしてリリースするには何らかの依存解決ツール(composer)を前提にする必要があります。</p>

<h2>more info</h2>

<p>このエントリーはこのビデオを参考に起こしています。</p>

<p><a href="http://youtu.be/KHKC470Gkic?t=11m22s">Decoupled Library Packages for PHP 5.4 &#8211; Paul Jones</a></p>

<p>また大抵のデザインパターン・パラダイムは、XX is evil, XX is anti paternで検索すると色々でてきます<sup><a href="#footnote_0_1446" id="identifier_0_1446" class="footnote-link footnote-identifier-link" title="^^;">1</a></sup></p>

<p><a href="http://blog.ploeh.dk/2010/02/03/ServiceLocatorIsAnAntiPattern.aspx">Service Locator is an Anti-Pattern</a></p>

<h2>CodeAsDocumentation</h2>

<p>この記事はSLが駄目という記事ではなくて、SLは「コンテナに依存するから駄目なのだ」という意見のどの部分が駄目なのかを考察することで、依存性を自己記述的な<a href="http://www.bear-project.net/blog/2012/10/codeasdocumentation/">CodeAsDocumentation</a>として表すDIの性質を明らかにしようとしました。</p>

<ol class="footnotes">
  <li id="footnote_0_1446" class="footnote">
    ^^; [<a href="#identifier_0_1446" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 9: Compile and Runtime]]></title>
    <link href="http://koriym.github.io/adv9"/>
    <updated>2012-12-12T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-9-compile-and-runtime</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv9">Tweet</a>
</div>


<h2>決定論</h2>

<blockquote><p>もしもある瞬間における全ての物質の力学的状態と力を知ることができ、かつもしもそれらのデータを解析できるだけの能力の知性が存在するとすれば、この知性にとっては、不確実なことは何もなくなり、その目には未来も（過去同様に）全て見えているであろう。</p>

<p>— 『確率の解析的理論』1812年</p></blockquote>

<p><a href="http://ja.wikipedia.org/wiki/%E3%83%A9%E3%83%97%E3%83%A9%E3%82%B9%E3%81%AE%E6%82%AA%E9%AD%94">「ラプラスの悪魔」</a>です。</p>

<p>ラプラスの悪魔のような、こんなデバックツールできないでしょうか？</p>

<blockquote><p><em>もしもある瞬間における全てのオブジェクトの状態と機能を知ることができ、かつもしもそれらのデータを解析できるだけの優れたアナライザーがあるとすれば、このアナライザーにとっては、不確実なことは何もなくなり、その目には全ての潜在的なバグが全て見えるであろう。</em></p></blockquote>

<p>&#8230;夢でしょうか^^;　しかしデバックに苦しむのは「状態の不確実性」からという事は多くないでしょうか？例外でいえばLogicExceptionの原因追及は、RunteimExceptionの例外の原因追及よりずっと簡単です。オブジェクトが&#8221;モード”やHTTPが状態（セッション）をもつと問題解決はずっと複雑になります。状態=不確実性=evil !</p>

<p>この記事ではオブジェクトの不確実性を低減する技術としてのDIを見て見ます。</p>

<h2>再び生成と利用分離原則</h2>

<p>DIでは生成と利用を分離しますが、分離するのはコードだけではありません。その時間（タイミング）も分離されます。「生成」が終わってから「利用」になるためです。BEAR.Sundayではオブジェクトの生成時に依存の注入だけでなく、アスペクトの織り込みも行われます。これがオブジェクトをつくるコンパイル。その時間がコンパイルタイムです。</p>

<p><a href="http://www.bear-project.net/blog/2012/12/advent-day-6-di-soc/">生成・使用分離の原則　DI 関心の分離</a>で[具象コード]と[抽象コード]の分離を示したようにするとこういう風になります。</p>

<p>生成と使用のタイミングが分離されていないパターン</p>

<p>&lt; -&mdash; boot終了 -&mdash;><br/>
&lt; -&mdash; runtime開始 -&mdash;><br/>
[生成]<br/>
[使用]<br/>
[生成]<br/>
[使用]<br/>
[使用]<br/>
[生成]<br/>
[使用]</p>

<p>生成と使用のタイミングが分離されているパターン(DI)<br/>
[生成]<br/>
[生成]<br/>
[生成]<br/>
&lt; -&mdash; boot終了 -&mdash;><br/>
&lt; -&mdash; runtime開始 -&mdash;><br/>
[使用]<br/>
[使用]<br/>
[使用]<br/>
[使用]</p>

<h2>オブジェクトグラフの決定</h2>

<p>DI以外のパターン、例えばfactory()メソッドとの比較は分かりやすいでしょう。コードの途中で現れたnew演算子やfactory()メソッドは<strong>&#8220;on demand&#8221;</strong>でオブジェクトの取得を行います。</p>

<p>対してService Locaterを使ったパターンではどうでしょうか。オブジェクトやあるいはオブジェクトの生成方法はboot時に各コンテナに格納されるので<strong>生成と使用のタイミングの分離はDIと同じ</strong>です。</p>

<p>しかしオブジェクト間の関係性=<strong>オブジェクトグラフの決定のタイミングが違います</strong>。SLではオブジェクトをコンテナから取り出しプロパティに格納あるいは直接利用します。その時点でdependentとdependencyの関係性が決定されます。つまり<strong>メソッド内の実装でその関係性が決定されます</strong>。</p>

<p>対してDIではメソッドシグネチャーとその束縛の集合がオブジェクトグラフを決定します。リクエストを受けたboot時にどのオブジェクトグラフが生成されるかが最大限、決定されています。</p>

<h2>その応用</h2>

<p>BEAR.Sundayではその特性を利用してオブジェクト生成の再利用を行っています。莫大なオブジェクトグラフコンストラクションコストは再利用され運用ではほぼ０になります。10万を超えるファンクションコールは1/100の1000程度になります。これは抽象化レイヤーが最少のFWとほぼ同等です。</p>

<p>この設計パターンはパフォーマンスの寄与と、より少ないコード実行を可能にしています。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 8: Packagist]]></title>
    <link href="http://koriym.github.io/adv8"/>
    <updated>2012-12-12T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-8-packagist</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv8">Tweet</a>
</div>


<h2>Packagist登録</h2>

<p>BEAR.PackageをPackagistに登録しました。<br/>
composerのcreate-projectでインストールできるようになりました。</p>

<p>composerインストール</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://getcomposer.org/composer.phar
</span></code></pre></td></tr></table></div></figure>


<p>または</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>curl -s https://getcomposer.org/installer | php
</span></code></pre></td></tr></table></div></figure>


<p>composerでBEAR.Sunday sandboxアプリケーションインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>php composer.phar create-project -s dev bear/package /tmp/mysunday
</span></code></pre></td></tr></table></div></figure>


<p>BEAR.Packageとその依存のBEAR.Sundayが指定したバージョンでインストールされます。<sup><a href="#footnote_0_1385" id="identifier_0_1385" class="footnote-link footnote-identifier-link" title=" インストールスクリプトはまだ用意できていないのでパーミッションの設定が現在必要です">1</a></sup> その後PHP5.4のbuilt-in web serverを立ち上げます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>composer.phar create-project -s dev bear/package /tmp/mysunday
</span><span class='line'>Installing bear/package <span class="o">(</span>dev-master bbc42caf8ed71e56c4f72f7270db012dc4b40d39<span class="o">)</span>
</span><span class='line'>  - Installing bear/package <span class="o">(</span>dev-master master<span class="o">)</span>
</span><span class='line'>    Cloning master
</span><span class='line'>Created project in /tmp/mysunday
</span><span class='line'>Loading composer repositories with package information
</span><span class='line'>Installing dependencies from lock file
</span><span class='line'>  - Installing aura/installer-default <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>  - Installing aura/web <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>  - Installing aura/signal <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>  - Installing aura/router <span class="o">(</span>1.0.0<span class="o">)</span>
</span><span class='line'>  - Installing aura/di <span class="o">(</span>1.0.1<span class="o">)</span>
</span><span class='line'>  - Installing doctrine/common <span class="o">(</span>2.3.x-dev bb0aebb<span class="o">)</span>
</span><span class='line'>    Cloning bb0aebbf234db52df476a2b473d434745b34221c
</span><span class='line'>  - Installing ray/aop <span class="o">(</span>dev-master 3edfe6b<span class="o">)</span>
</span><span class='line'>    Cloning 3edfe6ba6b52e8d3190da62c14479ff7cce2377f
</span><span class='line'>  - Installing ray/di <span class="o">(</span>dev-master 1.0.0-beta3<span class="o">)</span>
</span><span class='line'>    Cloning 1.0.0-beta3
</span><span class='line'>  - Installing zendframework/zend-stdlib <span class="o">(</span>2.0.5<span class="o">)</span>
</span><span class='line'>  - Installing zendframework/zend-log <span class="o">(</span>2.0.5<span class="o">)</span>
</span><span class='line'>  - Installing nocarrier/hal <span class="o">(</span>dev-master cc46654<span class="o">)</span>
</span><span class='line'>    Cloning cc466546c6ca5df3e806cd91258cdf194518a12f
</span><span class='line'>  - Installing twitter/bootstrap <span class="o">(</span>master master<span class="o">)</span>
</span><span class='line'>    Cloning master
</span><span class='line'>  - Installing firephp/firephp-core <span class="o">(</span>dev-master c26d972<span class="o">)</span>
</span><span class='line'>    Cloning c26d972dcb28fd483fa193512091df7b3c85e450
</span><span class='line'>  - Installing symfony/http-foundation <span class="o">(</span>2.0.x-dev 4de1a1f<span class="o">)</span>
</span><span class='line'>    Cloning 4de1a1f9a81a58bd6f24607894f76fd7017d45e7
</span><span class='line'>  - Installing symfony/console <span class="o">(</span>2.0.x-dev v2.0.19<span class="o">)</span>
</span><span class='line'>    Cloning v2.0.19
</span><span class='line'>  - Installing smarty/smarty <span class="o">(</span>v3.1.12<span class="o">)</span>
</span><span class='line'>    Checking out /tags/v3.1.12/@4664
</span><span class='line'>  - Installing pagerfanta/pagerfanta <span class="o">(</span>dev-master 12f71d9<span class="o">)</span>
</span><span class='line'>    Cloning 12f71d99457b018fb80746f84514dd5b495c5789
</span><span class='line'>  - Installing symfony/event-dispatcher <span class="o">(</span>dev-master eb290a4<span class="o">)</span>
</span><span class='line'>    Cloning eb290a447c0af5bea0d3de5d95d498afd8c82f89
</span><span class='line'>  - Installing guzzle/guzzle <span class="o">(</span>v2.7.2<span class="o">)</span>
</span><span class='line'>  - Installing facebook/xhprof <span class="o">(</span>0.9.2<span class="o">)</span>
</span><span class='line'>  - Installing doctrine/dbal <span class="o">(</span>2.3.x-dev f63af19<span class="o">)</span>
</span><span class='line'>    Cloning f63af1948a609a96b8ea1c1302c7cdf2f9f51468
</span><span class='line'>  - Installing printo/printo <span class="o">(</span>dev-master abd0d6b<span class="o">)</span>
</span><span class='line'>    Cloning abd0d6b68d00dc98a71124215780b57ec3ede268
</span><span class='line'>  - Installing vdump/vdump <span class="o">(</span>0.1.0<span class="o">)</span>
</span><span class='line'>  - Installing bear/resource <span class="o">(</span>dev-master 3ca644b<span class="o">)</span>
</span><span class='line'>    Cloning 3ca644bc29de4257ec9165ce1c9745150dc231dd
</span><span class='line'>  - Installing bear/sunday <span class="o">(</span>dev-master a9b6fdd<span class="o">)</span>
</span><span class='line'>    Cloning a9b6fdd7cd34b9e7d2075a7c95e066547bcf59ac
</span><span class='line'>zendframework/zend-stdlib suggests installing pecl-weakref <span class="o">(</span>Implementation of weak references <span class="k">for </span>Stdlib<span class="se">\C</span>allbackHandler<span class="o">)</span>
</span><span class='line'>zendframework/zend-log suggests installing zendframework/zend-db <span class="o">(</span>Zend<span class="se">\D</span>b component<span class="o">)</span>
</span><span class='line'>zendframework/zend-log suggests installing zendframework/zend-escaper <span class="o">(</span>Zend<span class="se">\E</span>scaper component, <span class="k">for </span>use in the XML formatter<span class="o">)</span>
</span><span class='line'>zendframework/zend-log suggests installing zendframework/zend-mail <span class="o">(</span>Zend<span class="se">\M</span>ail component<span class="o">)</span>
</span><span class='line'>zendframework/zend-log suggests installing zendframework/zend-validator <span class="o">(</span>Zend<span class="se">\V</span>alidator component<span class="o">)</span>
</span><span class='line'>pagerfanta/pagerfanta suggests installing doctrine/orm <span class="o">(</span>2.*<span class="o">)</span>
</span><span class='line'>pagerfanta/pagerfanta suggests installing doctrine/mongodb-odm <span class="o">(</span>2.*<span class="o">)</span>
</span><span class='line'>pagerfanta/pagerfanta suggests installing solarium/solarium <span class="o">(</span>2.*<span class="o">)</span>
</span><span class='line'>symfony/event-dispatcher suggests installing symfony/dependency-injection <span class="o">(</span>2.2.*<span class="o">)</span>
</span><span class='line'>symfony/event-dispatcher suggests installing symfony/http-kernel <span class="o">(</span>2.2.*<span class="o">)</span>
</span><span class='line'>Generating autoload files
</span><span class='line'>Do you want to remove the existing VCS <span class="o">(</span>.git, .svn..<span class="o">)</span> <span class="nb">history</span>? <span class="o">[</span>Y,n<span class="o">]</span>? Y
</span><span class='line'><span class="nv">$ </span>chmod -R 777 /tmp/mysunday/apps/Sandbox/data/
</span><span class='line'><span class="nv">$ </span>chmod -R 777 /tmp/mysunday/apps/Helloworld/data/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp/mysunday/apps/Sandbox/public/
</span><span class='line'><span class="nv">$ </span>php -S localhost:8088 web.php
</span><span class='line'>PHP 5.4.9 Development Server started at Wed Dec 12 13:11:37 2012
</span><span class='line'>Listening on http://localhost:8088
</span><span class='line'>Document root is /private/tmp/mysunday/apps/Sandbox/public
</span><span class='line'>Press Ctrl-C to quit.
</span></code></pre></td></tr></table></div></figure>




<ol class="footnotes">
  <li id="footnote_0_1385" class="footnote">
    インストールスクリプトはまだ用意できていないのでパーミッションの設定が現在必要です [<a href="#identifier_0_1385" class="footnote-link footnote-back-link">&#8617;</a>]
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 7: ver. 0.Go.Go]]></title>
    <link href="http://koriym.github.io/adv7"/>
    <updated>2012-12-11T00:00:00+09:00</updated>
    <id>http://koriym.github.io/advent-day-7-ver-0-go-go</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/adv7">Tweet</a>
</div>


<h2>Day 7</h2>

<p>Day 7、７日目の休息ということでDI記事お休みして <a href="https://travis-ci.org/koriym/BEAR.Package/builds/3592222" target="_blank">BEAR.Sudnayの0.5.5リリース</a>の案内です。</p>

<h2>BEAR.Sunday version 0.5.5</h2>

<p>現在のBEAR.Sundayアプリケーションは三層の構造になっています。</p>

<ul>
<li>Application アプリケーション</li>
<li>BEAR.Package アプリケーションパッケージ</li>
<li>BEAR.Sunday リソースフレームワーク</li>
</ul>


<h4>BEAR.Sunday</h4>

<p>Ray.Di/Aopという生成と振る舞いに制約と機能をもたらすオブジェクトフレームワークに、リソース制約を加えリソースフレームワークとしたものです。</p>

<h4>BEAR.Package</h4>

<p>必要なテンプレートエンジンやDBライブラリ等の実装選択等の実装選択と、フレームワークが持つ抽象の束縛の集合です。BEAR.Sundayは（コンポーネントの一貫性のプライオリティを下げてでも）多様なライブラリ選択を好みます。アプリケーションアーキテクトはスタッフやプロジェクトを勘案して、アプリケーションパッケージの構成を柔軟に構成することができます。複数のアプリケーションが共有する、チームのソフトウエア基盤です。アプリケーションのコンパイルタイムで必要な処理の多くはこのレイヤーが担当します。</p>

<h4>Application アプリケーション</h4>

<p>アプリケーションのランタイムコードの記述が中心になります。例えばDBオブジェクトがどのように生成されたかに関与はありません。セットされたDBを使って本質的関心事ではあるビジネスロジックを実現するコードを記述することが中心になります。</p>

<p>ここ最近の作業の中心はBEAR.Packageの分離とBEAR.Packageでのアプリケーションのより良い構成を持つ事でした。</p>

<h2>1.0.0 ?</h2>

<p>BEAR.Package以外の更新を最小化と、アプリケーション作成を通じてBEAR.Packageを熟成させ1.0.0リリースに繋げたいと思います。<br/>
当初予定してた今年中のリリースは難しいですが、来年明けの早い段階でと考えてます。</p>

<p>次の<a href="http://atnd.org/events/34068">Symfony勉強会 #7 (BEAR.Sundayワークショップ＆忘年会) 2012/12/15(Sun)</a>ではこの0.5.5を使います。よろしく御願いします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advent Day 6: DI SoC]]></title>
    <link href="http://koriym.github.io/2012/12/advent-day-6-di-soc/"/>
    <updated>2012-12-10T00:00:00+09:00</updated>
    <id>http://koriym.github.io/2012/12/advent-day-6-di-soc</id>
    <content type="html"><![CDATA[<div style="float: right; margin-left: 10px;">
  <a href="https://twitter.com/share" class="twitter-share-button" data-count="vertical" data-url="http://www.bear-project.net/blog/2012/12/advent-day-6-di-soc/">Tweet</a>
</div>


<h2>関心の分離としてのDI</h2>

<blockquote><p>オブジェクトは、他のオブジェクトの生成か、使用のいずれかのみを行い、双方を行ってはならない。<br/>
&#8212; <a href="http://d.hatena.ne.jp/asakichy/20090331/1238472501#20090331f1">生成・使用分離の原則 &#8211; Strategic Choice</a></p>

<p>Eric Raymondは『Art of UNIX Programming』の中で、UNIX®哲学の幾つかを次のように指摘しています。</p>

<p>モジュラー化の原則: 単純な部分を書き、きれいなインターフェースで接続する<br/>
分離の原則: ポリシーを機構から分離し、インターフェースをエンジンから分離する<br/>
表現の原則: ナレッジをデータの中に入れ込むことによって、プログラム・ロジックは愚かで堅牢となるようにする</p>

<p>こうした考え方は古いものですが、私達は、こうした考えをJava™技術で実現するための新しい方法を発見し続けているのです。そして<strong>分離のための技術の最新版</strong>、DI（dependency injection: 依存性注入）は、上記の理想を反映したものです。</p>

<p><a href="https://www.ibm.com/developerworks/jp/opensource/library/os-ag-ioc1/">https://www.ibm.com/developerworks/jp/opensource/library/os-ag-ioc1/</a></p></blockquote>

<h2>生成・使用分離の原則</h2>

<p>生成・使用分離の原則 &#8211; 時々聞くこの原則のそもそものソースは何だろうかと時々調べる事がありますが、それに巡り会えたことがありません。ついに見つけたのが流石Strategic Choiceブログなのですが、記事によると<strong>「<a href="http://d.hatena.ne.jp/asakichy/20090331/1238472501#20090331f1">名前がなかったので勝手につけました</a>」</strong>&#8230;どうりで中々見つからないわけです。</p>

<p>しかし記事は明快です。</p>

<blockquote><p>どうして？</p>

<p>この規則に従えば、作業分担が明確化され、結合度が低下する。</p>

<p>オブジェクトの使用は概念レベルを取り扱う。<br/>
オブジェクトの生成は具象レベルを取り扱う。<br/>
これらレベルの違うものを混ぜて設計すべきではない。<br/>
これらを分けて考えることで、それぞれに集中できる。</p></blockquote>

<p>大変重要です。つまりこれが良く分離されたソースコードでは「概念レベルを取り扱う」ものと「具象レベルを取り扱う」コードが分離されています。</p>

<p>[具象コード]<br/>
[具象コード]<br/>
[具象コード]</p>

<p>[概念コード]<br/>
[概念コード]<br/>
[概念コード]</p>

<p>良いコード。これが分離されレイヤーになっています。対してその逆では..</p>

<p>[具象コード]<br/>
[具象コード]<br/>
[概念コード]<br/>
[具象コード]<br/>
[具象コード]<br/>
[概念コード]</p>

<p>クリアに説明されるとスッキリします。この善し悪しはイメージしやすいのではないでしょうか。ソースの可読性はスコープを狭くして細かく語られることも多いですが、このように大きなスコープでの設計原則が守られてるかという事も大事なのではないかと考えます。</p>

<p>DIの説明を時々料理に例えることがあります。レシピを見て、材料を揃え下ごしらえを済ませてから調理（runtime)に移ります。調理中には途中で材料を選んだり買い物をしなおしたりすることはありません。道具の準備や下ごしらを完了してから調理に移ります。準備と利用は分離され、分業も可能です。</p>

<p>BEAR.Sundayでもruntimeでは原則オブジェクトは用意されたものを利用するだけで、生成に関しての関心は極小化されています。runtimeでオブジェクトの生成方法をアプリケーションワイドなconfigから調べ作成する事は原則ありません。</p>
]]></content>
  </entry>
  
</feed>
